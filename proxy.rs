// Generated by `wit-bindgen` 0.6.0. DO NOT EDIT!

#[allow(clippy::all)]
pub mod wall_clock{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  /// A time and date in seconds plus nanoseconds.
  #[repr(C)]
  #[derive(Copy, Clone)]
  pub struct Datetime {
    pub seconds: u64,
    pub nanoseconds: u32,
  }
  impl core::fmt::Debug for Datetime {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      f.debug_struct("Datetime").field("seconds", &self.seconds).field("nanoseconds", &self.nanoseconds).finish()
    }
  }
  #[allow(clippy::all)]
  /// Read the current value of the clock.
  /// 
  /// This clock is not monotonic, therefore calling this function repeatedly
  /// will not necessarily produce a sequence of non-decreasing values.
  /// 
  /// The returned timestamps represent the number of seconds since
  /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
  /// also known as [Unix Time].
  /// 
  /// The nanoseconds field of the output is always less than 1000000000.
  /// 
  /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
  /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
  pub fn now() -> Datetime{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "wall-clock")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "now")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "wall-clock_now")]
        fn wit_import(
        _: i32, );
      }
      wit_import(ptr0);
      Datetime{seconds:*((ptr0 + 0) as *const i64) as u64, nanoseconds:*((ptr0 + 8) as *const i32) as u32, }
    }
  }
  #[allow(clippy::all)]
  /// Query the resolution of the clock.
  /// 
  /// The nanoseconds field of the output is always less than 1000000000.
  pub fn resolution() -> Datetime{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "wall-clock")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "resolution")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "wall-clock_resolution")]
        fn wit_import(
        _: i32, );
      }
      wit_import(ptr0);
      Datetime{seconds:*((ptr0 + 0) as *const i64) as u64, nanoseconds:*((ptr0 + 8) as *const i32) as u32, }
    }
  }
  
}


#[allow(clippy::all)]
pub mod poll{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  /// A "pollable" handle.
  /// 
  /// This is conceptually represents a `stream<_, _>`, or in other words,
  /// a stream that one can wait on, repeatedly, but which does not itself
  /// produce any data. It's temporary scaffolding until component-model's
  /// async features are ready.
  /// 
  /// And at present, it is a `u32` instead of being an actual handle, until
  /// the wit-bindgen implementation of handles and resources is ready.
  /// 
  /// `pollable` lifetimes are not automatically managed. Users must ensure
  /// that they do not outlive the resource they reference.
  /// 
  /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
  pub type Pollable = u32;
  #[allow(clippy::all)]
  /// Dispose of the specified `pollable`, after which it may no longer
  /// be used.
  pub fn drop_pollable(this: Pollable,){
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "poll")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "drop-pollable")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "poll_drop-pollable")]
        fn wit_import(
        _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this));
    }
  }
  #[allow(clippy::all)]
  /// Poll for completion on a set of pollables.
  /// 
  /// The "oneoff" in the name refers to the fact that this function must do a
  /// linear scan through the entire list of subscriptions, which may be
  /// inefficient if the number is large and the same subscriptions are used
  /// many times. In the future, this is expected to be obsoleted by the
  /// component model async proposal, which will include a scalable waiting
  /// facility.
  /// 
  /// Note that the return type would ideally be `list<bool>`, but that would
  /// be more difficult to polyfill given the current state of `wit-bindgen`.
  /// See <https://github.com/bytecodealliance/preview2-prototyping/pull/11#issuecomment-1329873061>
  /// for details.  For now, we use zero to mean "not ready" and non-zero to
  /// mean "ready".
  pub fn poll_oneoff(in_: &[Pollable],) -> wit_bindgen::rt::vec::Vec::<u8>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 8]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let vec0 = in_;
      let ptr0 = vec0.as_ptr() as i32;
      let len0 = vec0.len() as i32;
      let ptr1 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "poll")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "poll-oneoff")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "poll_poll-oneoff")]
        fn wit_import(
        _: i32, _: i32, _: i32, );
      }
      wit_import(ptr0, len0, ptr1);
      let len2 = *((ptr1 + 4) as *const i32) as usize;
      Vec::from_raw_parts(*((ptr1 + 0) as *const i32) as *mut _, len2, len2)
    }
  }
  
}


#[allow(clippy::all)]
pub mod monotonic_clock{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type Pollable = super::poll::Pollable;
  /// A timestamp in nanoseconds.
  pub type Instant = u64;
  #[allow(clippy::all)]
  /// Read the current value of the clock.
  /// 
  /// The clock is monotonic, therefore calling this function repeatedly will
  /// produce a sequence of non-decreasing values.
  pub fn now() -> Instant{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "monotonic-clock")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "now")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_now")]
        fn wit_import(
        ) -> i64;
      }
      let ret = wit_import();
      ret as u64
    }
  }
  #[allow(clippy::all)]
  /// Query the resolution of the clock.
  pub fn resolution() -> Instant{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "monotonic-clock")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "resolution")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_resolution")]
        fn wit_import(
        ) -> i64;
      }
      let ret = wit_import();
      ret as u64
    }
  }
  #[allow(clippy::all)]
  /// Create a `pollable` which will resolve once the specified time has been
  /// reached.
  pub fn subscribe(when: Instant,absolute: bool,) -> Pollable{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "monotonic-clock")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "subscribe")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_subscribe")]
        fn wit_import(
        _: i64, _: i32, ) -> i32;
      }
      let ret = wit_import(wit_bindgen::rt::as_i64(when), match absolute { true => 1, false => 0 });
      ret as u32
    }
  }
  
}


#[allow(clippy::all)]
pub mod timezone{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type Datetime = super::wall_clock::Datetime;
  /// Information useful for displaying the timezone of a specific `datetime`.
  /// 
  /// This information may vary within a single `timezone` to reflect daylight
  /// saving time adjustments.
  #[derive(Clone)]
  pub struct TimezoneDisplay {
    /// The number of seconds difference between UTC time and the local
    /// time of the timezone.
    /// 
    /// The returned value will always be less than 86400 which is the
    /// number of seconds in a day (24*60*60).
    /// 
    /// In implementations that do not expose an actual time zone, this
    /// should return 0.
    pub utc_offset: i32,
    /// The abbreviated name of the timezone to display to a user. The name
    /// `UTC` indicates Coordinated Universal Time. Otherwise, this should
    /// reference local standards for the name of the time zone.
    /// 
    /// In implementations that do not expose an actual time zone, this
    /// should be the string `UTC`.
    /// 
    /// In time zones that do not have an applicable name, a formatted
    /// representation of the UTC offset may be returned, such as `-04:00`.
    pub name: wit_bindgen::rt::string::String,
    /// Whether daylight saving time is active.
    /// 
    /// In implementations that do not expose an actual time zone, this
    /// should return false.
    pub in_daylight_saving_time: bool,
  }
  impl core::fmt::Debug for TimezoneDisplay {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      f.debug_struct("TimezoneDisplay").field("utc-offset", &self.utc_offset).field("name", &self.name).field("in-daylight-saving-time", &self.in_daylight_saving_time).finish()
    }
  }
  /// A timezone.
  /// 
  /// In timezones that recognize daylight saving time, also known as daylight
  /// time and summer time, the information returned from the functions varies
  /// over time to reflect these adjustments.
  /// 
  /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
  pub type Timezone = u32;
  #[allow(clippy::all)]
  /// Return information needed to display the given `datetime`. This includes
  /// the UTC offset, the time zone name, and a flag indicating whether
  /// daylight saving time is active.
  /// 
  /// If the timezone cannot be determined for the given `datetime`, return a
  /// `timezone-display` for `UTC` with a `utc-offset` of 0 and no daylight
  /// saving time.
  pub fn display(this: Timezone,when: Datetime,) -> TimezoneDisplay{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let super::wall_clock::Datetime{ seconds:seconds0, nanoseconds:nanoseconds0, } = when;
      let ptr1 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "timezone")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "display")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_display")]
        fn wit_import(
        _: i32, _: i64, _: i32, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(seconds0), wit_bindgen::rt::as_i32(nanoseconds0), ptr1);
      let len2 = *((ptr1 + 8) as *const i32) as usize;
      TimezoneDisplay{utc_offset:*((ptr1 + 0) as *const i32), name:{#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr1 + 4) as *const i32) as *mut _, len2, len2))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr1 + 4) as *const i32) as *mut _, len2, len2)).unwrap()}}, in_daylight_saving_time:{
        #[cfg(not(debug_assertions))]
        { core::mem::transmute::<u8, bool>(i32::from(*((ptr1 + 12) as *const u8)) as u8) }
        #[cfg(debug_assertions)]
        {
          match i32::from(*((ptr1 + 12) as *const u8)) {
            0 => false,
            1 => true,
            _ => panic!("invalid bool discriminant"),
          }
        }
      }, }
    }
  }
  #[allow(clippy::all)]
  /// The same as `display`, but only return the UTC offset.
  pub fn utc_offset(this: Timezone,when: Datetime,) -> i32{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      let super::wall_clock::Datetime{ seconds:seconds0, nanoseconds:nanoseconds0, } = when;
      
      #[link(wasm_import_module = "timezone")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "utc-offset")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_utc-offset")]
        fn wit_import(
        _: i32, _: i64, _: i32, ) -> i32;
      }
      let ret = wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(seconds0), wit_bindgen::rt::as_i32(nanoseconds0));
      ret
    }
  }
  #[allow(clippy::all)]
  /// Dispose of the specified input-stream, after which it may no longer
  /// be used.
  pub fn drop_timezone(this: Timezone,){
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "timezone")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "drop-timezone")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_drop-timezone")]
        fn wit_import(
        _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this));
    }
  }
  
}


#[allow(clippy::all)]
pub mod random{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  #[allow(clippy::all)]
  /// Return `len` cryptographically-secure pseudo-random bytes.
  /// 
  /// This function must produce data from an adequately seeded
  /// cryptographically-secure pseudo-random number generator (CSPRNG), so it
  /// must not block, from the perspective of the calling program, and the
  /// returned data is always unpredictable.
  /// 
  /// This function must always return fresh pseudo-random data. Deterministic
  /// environments must omit this function, rather than implementing it with
  /// deterministic data.
  pub fn get_random_bytes(len: u64,) -> wit_bindgen::rt::vec::Vec::<u8>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 8]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "random")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "get-random-bytes")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "random_get-random-bytes")]
        fn wit_import(
        _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i64(len), ptr0);
      let len1 = *((ptr0 + 4) as *const i32) as usize;
      Vec::from_raw_parts(*((ptr0 + 0) as *const i32) as *mut _, len1, len1)
    }
  }
  #[allow(clippy::all)]
  /// Return a cryptographically-secure pseudo-random `u64` value.
  /// 
  /// This function returns the same type of pseudo-random data as
  /// `get-random-bytes`, represented as a `u64`.
  pub fn get_random_u64() -> u64{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "random")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "get-random-u64")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "random_get-random-u64")]
        fn wit_import(
        ) -> i64;
      }
      let ret = wit_import();
      ret as u64
    }
  }
  
}


#[allow(clippy::all)]
pub mod streams{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type Pollable = super::poll::Pollable;
  /// An error type returned from a stream operation. Currently this
  /// doesn't provide any additional information.
  #[repr(C)]
  #[derive(Copy, Clone)]
  pub struct StreamError {
  }
  impl core::fmt::Debug for StreamError {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      f.debug_struct("StreamError").finish()
    }
  }
  impl core::fmt::Display for StreamError {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      write!(f, "{:?}", self)
    }
  }
  impl std::error::Error for StreamError{}
  /// An output bytestream. In the future, this will be replaced by handle
  /// types.
  /// 
  /// This conceptually represents a `stream<u8, _>`. It's temporary
  /// scaffolding until component-model's async features are ready.
  /// 
  /// `output-stream`s are *non-blocking* to the extent practical on
  /// underlying platforms. Except where specified otherwise, I/O operations also
  /// always return promptly, after the number of bytes that can be written
  /// promptly, which could even be zero. To wait for the stream to be ready to
  /// accept data, the `subscribe-to-output-stream` function to obtain a
  /// `pollable` which can be polled for using `wasi_poll`.
  /// 
  /// And at present, it is a `u32` instead of being an actual handle, until
  /// the wit-bindgen implementation of handles and resources is ready.
  /// 
  /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
  pub type OutputStream = u32;
  /// An input bytestream. In the future, this will be replaced by handle
  /// types.
  /// 
  /// This conceptually represents a `stream<u8, _>`. It's temporary
  /// scaffolding until component-model's async features are ready.
  /// 
  /// `input-stream`s are *non-blocking* to the extent practical on underlying
  /// platforms. I/O operations always return promptly; if fewer bytes are
  /// promptly available than requested, they return the number of bytes promptly
  /// available, which could even be zero. To wait for data to be available,
  /// use the `subscribe-to-input-stream` function to obtain a `pollable` which
  /// can be polled for using `wasi_poll`.
  /// 
  /// And at present, it is a `u32` instead of being an actual handle, until
  /// the wit-bindgen implementation of handles and resources is ready.
  /// 
  /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
  pub type InputStream = u32;
  #[allow(clippy::all)]
  /// Read bytes from a stream.
  /// 
  /// This function returns a list of bytes containing the data that was
  /// read, along with a bool which, when true, indicates that the end of the
  /// stream was reached. The returned list will contain up to `len` bytes; it
  /// may return fewer than requested, but not more.
  /// 
  /// Once a stream has reached the end, subsequent calls to read or
  /// `skip` will always report end-of-stream rather than producing more
  /// data.
  /// 
  /// If `len` is 0, it represents a request to read 0 bytes, which should
  /// always succeed, assuming the stream hasn't reached its end yet, and
  /// return an empty list.
  /// 
  /// The len here is a `u64`, but some callees may not be able to allocate
  /// a buffer as large as that would imply.
  /// FIXME: describe what happens if allocation fails.
  pub fn read(this: InputStream,len: u64,) -> Result<(wit_bindgen::rt::vec::Vec::<u8>,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "read")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_read")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok({
          let len1 = *((ptr0 + 8) as *const i32) as usize;
          
          (Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1), {
            #[cfg(not(debug_assertions))]
            { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 12) as *const u8)) as u8) }
            #[cfg(debug_assertions)]
            {
              match i32::from(*((ptr0 + 12) as *const u8)) {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
              }
            }
          })
        }),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Read bytes from a stream, with blocking.
  /// 
  /// This is similar to `read`, except that it blocks until at least one
  /// byte can be read.
  pub fn blocking_read(this: InputStream,len: u64,) -> Result<(wit_bindgen::rt::vec::Vec::<u8>,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "blocking-read")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-read")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok({
          let len1 = *((ptr0 + 8) as *const i32) as usize;
          
          (Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1), {
            #[cfg(not(debug_assertions))]
            { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 12) as *const u8)) as u8) }
            #[cfg(debug_assertions)]
            {
              match i32::from(*((ptr0 + 12) as *const u8)) {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
              }
            }
          })
        }),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Skip bytes from a stream.
  /// 
  /// This is similar to the `read` function, but avoids copying the
  /// bytes into the instance.
  /// 
  /// Once a stream has reached the end, subsequent calls to read or
  /// `skip` will always report end-of-stream rather than producing more
  /// data.
  /// 
  /// This function returns the number of bytes skipped, along with a bool
  /// indicating whether the end of the stream was reached. The returned
  /// value will be at most `len`; it may be less.
  pub fn skip(this: InputStream,len: u64,) -> Result<(u64,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 24]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "skip")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_skip")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
          #[cfg(not(debug_assertions))]
          { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 16) as *const u8)) as u8) }
          #[cfg(debug_assertions)]
          {
            match i32::from(*((ptr0 + 16) as *const u8)) {
              0 => false,
              1 => true,
              _ => panic!("invalid bool discriminant"),
            }
          }
        })),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Skip bytes from a stream, with blocking.
  /// 
  /// This is similar to `skip`, except that it blocks until at least one
  /// byte can be consumed.
  pub fn blocking_skip(this: InputStream,len: u64,) -> Result<(u64,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 24]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "blocking-skip")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-skip")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
          #[cfg(not(debug_assertions))]
          { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 16) as *const u8)) as u8) }
          #[cfg(debug_assertions)]
          {
            match i32::from(*((ptr0 + 16) as *const u8)) {
              0 => false,
              1 => true,
              _ => panic!("invalid bool discriminant"),
            }
          }
        })),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Create a `pollable` which will resolve once either the specified stream
  /// has bytes available to read or the other end of the stream has been
  /// closed.
  pub fn subscribe_to_input_stream(this: InputStream,) -> Pollable{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "subscribe-to-input-stream")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_subscribe-to-input-stream")]
        fn wit_import(
        _: i32, ) -> i32;
      }
      let ret = wit_import(wit_bindgen::rt::as_i32(this));
      ret as u32
    }
  }
  #[allow(clippy::all)]
  /// Dispose of the specified `input-stream`, after which it may no longer
  /// be used.
  pub fn drop_input_stream(this: InputStream,){
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "drop-input-stream")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_drop-input-stream")]
        fn wit_import(
        _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this));
    }
  }
  #[allow(clippy::all)]
  /// Write bytes to a stream.
  /// 
  /// This function returns a `u64` indicating the number of bytes from
  /// `buf` that were written; it may be less than the full list.
  pub fn write(this: OutputStream,buf: &[u8],) -> Result<u64,StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let vec0 = buf;
      let ptr0 = vec0.as_ptr() as i32;
      let len0 = vec0.len() as i32;
      let ptr1 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "write")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_write")]
        fn wit_import(
        _: i32, _: i32, _: i32, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
      match i32::from(*((ptr1 + 0) as *const u8)) {
        0 => Ok(*((ptr1 + 8) as *const i64) as u64),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Write bytes to a stream, with blocking.
  /// 
  /// This is similar to `write`, except that it blocks until at least one
  /// byte can be written.
  pub fn blocking_write(this: OutputStream,buf: &[u8],) -> Result<u64,StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let vec0 = buf;
      let ptr0 = vec0.as_ptr() as i32;
      let len0 = vec0.len() as i32;
      let ptr1 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "blocking-write")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-write")]
        fn wit_import(
        _: i32, _: i32, _: i32, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
      match i32::from(*((ptr1 + 0) as *const u8)) {
        0 => Ok(*((ptr1 + 8) as *const i64) as u64),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Write multiple zero bytes to a stream.
  /// 
  /// This function returns a `u64` indicating the number of zero bytes
  /// that were written; it may be less than `len`.
  pub fn write_zeroes(this: OutputStream,len: u64,) -> Result<u64,StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "write-zeroes")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_write-zeroes")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok(*((ptr0 + 8) as *const i64) as u64),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Write multiple zero bytes to a stream, with blocking.
  /// 
  /// This is similar to `write-zeroes`, except that it blocks until at least
  /// one byte can be written.
  pub fn blocking_write_zeroes(this: OutputStream,len: u64,) -> Result<u64,StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "blocking-write-zeroes")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-write-zeroes")]
        fn wit_import(
        _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok(*((ptr0 + 8) as *const i64) as u64),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Read from one stream and write to another.
  /// 
  /// This function returns the number of bytes transferred; it may be less
  /// than `len`.
  /// 
  /// Unlike other I/O functions, this function blocks until all the data
  /// read from the input stream has been written to the output stream.
  pub fn splice(this: OutputStream,src: InputStream,len: u64,) -> Result<(u64,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 24]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "splice")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_splice")]
        fn wit_import(
        _: i32, _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i32(src), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
          #[cfg(not(debug_assertions))]
          { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 16) as *const u8)) as u8) }
          #[cfg(debug_assertions)]
          {
            match i32::from(*((ptr0 + 16) as *const u8)) {
              0 => false,
              1 => true,
              _ => panic!("invalid bool discriminant"),
            }
          }
        })),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Read from one stream and write to another, with blocking.
  /// 
  /// This is similar to `splice`, except that it blocks until at least
  /// one byte can be read.
  pub fn blocking_splice(this: OutputStream,src: InputStream,len: u64,) -> Result<(u64,bool,),StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 24]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "blocking-splice")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-splice")]
        fn wit_import(
        _: i32, _: i32, _: i64, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i32(src), wit_bindgen::rt::as_i64(len), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
          #[cfg(not(debug_assertions))]
          { core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 16) as *const u8)) as u8) }
          #[cfg(debug_assertions)]
          {
            match i32::from(*((ptr0 + 16) as *const u8)) {
              0 => false,
              1 => true,
              _ => panic!("invalid bool discriminant"),
            }
          }
        })),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Forward the entire contents of an input stream to an output stream.
  /// 
  /// This function repeatedly reads from the input stream and writes
  /// the data to the output stream, until the end of the input stream
  /// is reached, or an error is encountered.
  /// 
  /// Unlike other I/O functions, this function blocks until the end
  /// of the input stream is seen and all the data has been written to
  /// the output stream.
  /// 
  /// This function returns the number of bytes transferred.
  pub fn forward(this: OutputStream,src: InputStream,) -> Result<u64,StreamError>{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(8))]
      struct RetArea([u8; 16]);
      let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
      let ptr0 = ret_area.as_mut_ptr() as i32;
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "forward")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_forward")]
        fn wit_import(
        _: i32, _: i32, _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this), wit_bindgen::rt::as_i32(src), ptr0);
      match i32::from(*((ptr0 + 0) as *const u8)) {
        0 => Ok(*((ptr0 + 8) as *const i64) as u64),
        1 => Err(StreamError{}),
        #[cfg(not(debug_assertions))]
        _ => core::hint::unreachable_unchecked(),
        #[cfg(debug_assertions)]
        _ => panic!("invalid enum discriminant"),
      }
    }
  }
  #[allow(clippy::all)]
  /// Create a `pollable` which will resolve once either the specified stream
  /// is ready to accept bytes or the other end of the stream has been closed.
  pub fn subscribe_to_output_stream(this: OutputStream,) -> Pollable{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "subscribe-to-output-stream")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_subscribe-to-output-stream")]
        fn wit_import(
        _: i32, ) -> i32;
      }
      let ret = wit_import(wit_bindgen::rt::as_i32(this));
      ret as u32
    }
  }
  #[allow(clippy::all)]
  /// Dispose of the specified `output-stream`, after which it may no longer
  /// be used.
  pub fn drop_output_stream(this: OutputStream,){
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "streams")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "drop-output-stream")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_drop-output-stream")]
        fn wit_import(
        _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(this));
    }
  }
  
}


#[allow(clippy::all)]
pub mod stdout{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type OutputStream = super::streams::OutputStream;
  #[allow(clippy::all)]
  pub fn get_stdout() -> OutputStream{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "stdout")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "get-stdout")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "stdout_get-stdout")]
        fn wit_import(
        ) -> i32;
      }
      let ret = wit_import();
      ret as u32
    }
  }
  
}


#[allow(clippy::all)]
pub mod stderr{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type OutputStream = super::streams::OutputStream;
  #[allow(clippy::all)]
  pub fn get_stderr() -> OutputStream{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "stderr")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "get-stderr")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "stderr_get-stderr")]
        fn wit_import(
        ) -> i32;
      }
      let ret = wit_import();
      ret as u32
    }
  }
  
}


#[allow(clippy::all)]
pub mod stdin{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type InputStream = super::streams::InputStream;
  #[allow(clippy::all)]
  pub fn get_stdin() -> InputStream{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "stdin")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "get-stdin")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "stdin_get-stdin")]
        fn wit_import(
        ) -> i32;
      }
      let ret = wit_import();
      ret as u32
    }
  }
  
}


#[allow(clippy::all)]
pub mod types{
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  
  pub type InputStream = super::streams::InputStream;
  pub type OutputStream = super::streams::OutputStream;
  pub type Pollable = super::poll::Pollable;
  pub type StatusCode = u16;
  #[derive(Clone)]
  pub enum Scheme{
    Http,
    Https,
    Other(wit_bindgen::rt::string::String),
  }
  impl core::fmt::Debug for Scheme {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      match self {
        Scheme::Http => {
          f.debug_tuple("Scheme::Http").finish()
        }
        Scheme::Https => {
          f.debug_tuple("Scheme::Https").finish()
        }
        Scheme::Other(e) => {
          f.debug_tuple("Scheme::Other").field(e).finish()
        }
      }
    }
  }
  pub type ResponseOutparam = u32;
  #[repr(C)]
  #[derive(Copy, Clone)]
  pub struct RequestOptions {
    pub connect_timeout_ms: Option<u32>,
    pub first_byte_timeout_ms: Option<u32>,
    pub between_bytes_timeout_ms: Option<u32>,
  }
  impl core::fmt::Debug for RequestOptions {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      f.debug_struct("RequestOptions").field("connect-timeout-ms", &self.connect_timeout_ms).field("first-byte-timeout-ms", &self.first_byte_timeout_ms).field("between-bytes-timeout-ms", &self.between_bytes_timeout_ms).finish()
    }
  }
  pub type OutgoingStream = OutputStream;
  pub type OutgoingResponse = u32;
  pub type OutgoingRequest = u32;
  #[derive(Clone)]
  pub enum Method{
    Get,
    Head,
    Post,
    Put,
    Delete,
    Connect,
    Options,
    Trace,
    Patch,
    Other(wit_bindgen::rt::string::String),
  }
  impl core::fmt::Debug for Method {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      match self {
        Method::Get => {
          f.debug_tuple("Method::Get").finish()
        }
        Method::Head => {
          f.debug_tuple("Method::Head").finish()
        }
        Method::Post => {
          f.debug_tuple("Method::Post").finish()
        }
        Method::Put => {
          f.debug_tuple("Method::Put").finish()
        }
        Method::Delete => {
          f.debug_tuple("Method::Delete").finish()
        }
        Method::Connect => {
          f.debug_tuple("Method::Connect").finish()
        }
        Method::Options => {
          f.debug_tuple("Method::Options").finish()
        }
        Method::Trace => {
          f.debug_tuple("Method::Trace").finish()
        }
        Method::Patch => {
          f.debug_tuple("Method::Patch").finish()
        }
        Method::Other(e) => {
          f.debug_tuple("Method::Other").field(e).finish()
        }
      }
    }
  }
  pub type IncomingStream = InputStream;
  pub type IncomingResponse = u32;
  pub type IncomingRequest = u32;
  pub type FutureIncomingResponse = u32;
  pub type Fields = u32;
  pub type Trailers = Fields;
  pub type Headers = Fields;
  #[derive(Clone)]
  pub enum Error{
    InvalidUrl(wit_bindgen::rt::string::String),
    TimeoutError(wit_bindgen::rt::string::String),
    ProtocolError(wit_bindgen::rt::string::String),
    UnexpectedError(wit_bindgen::rt::string::String),
  }
  impl core::fmt::Debug for Error {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      match self {
        Error::InvalidUrl(e) => {
          f.debug_tuple("Error::InvalidUrl").field(e).finish()
        }
        Error::TimeoutError(e) => {
          f.debug_tuple("Error::TimeoutError").field(e).finish()
        }
        Error::ProtocolError(e) => {
          f.debug_tuple("Error::ProtocolError").field(e).finish()
        }
        Error::UnexpectedError(e) => {
          f.debug_tuple("Error::UnexpectedError").field(e).finish()
        }
      }
    }
  }
  #[allow(clippy::all)]
  pub fn drop_fields(fields: Fields,){
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[link(wasm_import_module = "types")]
      extern "C" {
        #[cfg_attr(target_arch = "wasm32", link_name = "drop-fields")]
        #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-fields")]
        fn wit_import(
        _: i32, );
      }
      wit_import(wit_bindgen::rt::as_i32(fields));
    }
  }
  #[allow(clippy::all)]
  pub fn new_fields(entries: &[(&str,&[u8],)],) -> Fields{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      let vec3 = entries;
      let len3 = vec3.len() as i32;
      let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 16, 4);
      let result3 = if layout3.size() != 0
      {
        let ptr = alloc::alloc(layout3);
        if ptr.is_null()
        {
          alloc::handle_alloc_error(layout3);
        }
        ptr
      }else {
        core::ptr::null_mut()
      };
      for (i, e) in vec3.into_iter().enumerate() {
        let base = result3 as i32 + (i as i32) * 16;
        {
          let (t0_0, t0_1, ) = e;
          let vec1 = t0_0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          *((base + 4) as *mut i32) = len1;
          *((base + 0) as *mut i32) = ptr1;
          let vec2 = t0_1;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          *((base + 12) as *mut i32) = len2;
          *((base + 8) as *mut i32) = ptr2;
          
        }}
        
        #[link(wasm_import_module = "types")]
        extern "C" {
          #[cfg_attr(target_arch = "wasm32", link_name = "new-fields")]
          #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_new-fields")]
          fn wit_import(
          _: i32, _: i32, ) -> i32;
        }
        let ret = wit_import(result3 as i32, len3);
        if layout3.size() != 0 {
          alloc::dealloc(result3, layout3);
        }
        ret as u32
      }
    }
    #[allow(clippy::all)]
    pub fn fields_get(fields: Fields,name: &str,) -> wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<u8>>{
      
      #[allow(unused_imports)]
      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
      unsafe {
        
        #[repr(align(4))]
        struct RetArea([u8; 8]);
        let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
        let vec0 = name;
        let ptr0 = vec0.as_ptr() as i32;
        let len0 = vec0.len() as i32;
        let ptr1 = ret_area.as_mut_ptr() as i32;
        #[link(wasm_import_module = "types")]
        extern "C" {
          #[cfg_attr(target_arch = "wasm32", link_name = "fields-get")]
          #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-get")]
          fn wit_import(
          _: i32, _: i32, _: i32, _: i32, );
        }
        wit_import(wit_bindgen::rt::as_i32(fields), ptr0, len0, ptr1);
        let base3 = *((ptr1 + 0) as *const i32);
        let len3 = *((ptr1 + 4) as *const i32);
        let mut result3 = Vec::with_capacity(len3 as usize);
        for i in 0..len3 {
          let base = base3 + i *8;
          result3.push({
            let len2 = *((base + 4) as *const i32) as usize;
            
            Vec::from_raw_parts(*((base + 0) as *const i32) as *mut _, len2, len2)
          });
        }
        wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
        result3
      }
    }
    #[allow(clippy::all)]
    pub fn fields_set(fields: Fields,name: &str,value: &[&[u8]],){
      
      #[allow(unused_imports)]
      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
      unsafe {
        let vec0 = name;
        let ptr0 = vec0.as_ptr() as i32;
        let len0 = vec0.len() as i32;
        let vec2 = value;
        let len2 = vec2.len() as i32;
        let layout2 = alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
        let result2 = if layout2.size() != 0
        {
          let ptr = alloc::alloc(layout2);
          if ptr.is_null()
          {
            alloc::handle_alloc_error(layout2);
          }
          ptr
        }else {
          core::ptr::null_mut()
        };
        for (i, e) in vec2.into_iter().enumerate() {
          let base = result2 as i32 + (i as i32) * 8;
          {
            let vec1 = e;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            *((base + 4) as *mut i32) = len1;
            *((base + 0) as *mut i32) = ptr1;
            
          }}
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "fields-set")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-set")]
            fn wit_import(
            _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(fields), ptr0, len0, result2 as i32, len2);
          if layout2.size() != 0 {
            alloc::dealloc(result2, layout2);
          }
        }
      }
      #[allow(clippy::all)]
      pub fn fields_delete(fields: Fields,name: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = name;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "fields-delete")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-delete")]
            fn wit_import(
            _: i32, _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(fields), ptr0, len0);
        }
      }
      #[allow(clippy::all)]
      pub fn fields_append(fields: Fields,name: &str,value: &[u8],){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = name;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let vec1 = value;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "fields-append")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-append")]
            fn wit_import(
            _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(fields), ptr0, len0, ptr1, len1);
        }
      }
      #[allow(clippy::all)]
      pub fn fields_entries(fields: Fields,) -> wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,wit_bindgen::rt::vec::Vec::<u8>,)>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "fields-entries")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-entries")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(fields), ptr0);
          let base3 = *((ptr0 + 0) as *const i32);
          let len3 = *((ptr0 + 4) as *const i32);
          let mut result3 = Vec::with_capacity(len3 as usize);
          for i in 0..len3 {
            let base = base3 + i *16;
            result3.push({
              let len1 = *((base + 4) as *const i32) as usize;
              let len2 = *((base + 12) as *const i32) as usize;
              
              ({#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((base + 0) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((base + 0) as *const i32) as *mut _, len1, len1)).unwrap()}}, Vec::from_raw_parts(*((base + 8) as *const i32) as *mut _, len2, len2))
            });
          }
          wit_bindgen::rt::dealloc(base3, (len3 as usize) * 16, 4);
          result3
        }
      }
      #[allow(clippy::all)]
      pub fn fields_clone(fields: Fields,) -> Fields{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "fields-clone")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_fields-clone")]
            fn wit_import(
            _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(fields));
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn finish_incoming_stream(s: IncomingStream,) -> Option<Trailers>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "finish-incoming-stream")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_finish-incoming-stream")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(s), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => None,
            1 => Some(*((ptr0 + 4) as *const i32) as u32),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn finish_outgoing_stream(s: OutgoingStream,trailers: Option<Trailers>,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (result0_0,result0_1,) = match trailers {
            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
            None => {
              (0i32, 0i32)
            },
          };
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "finish-outgoing-stream")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_finish-outgoing-stream")]
            fn wit_import(
            _: i32, _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(s), result0_0, result0_1);
        }
      }
      #[allow(clippy::all)]
      pub fn drop_incoming_request(request: IncomingRequest,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-incoming-request")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-incoming-request")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request));
        }
      }
      #[allow(clippy::all)]
      pub fn drop_outgoing_request(request: OutgoingRequest,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-outgoing-request")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-outgoing-request")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request));
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_method(request: IncomingRequest,) -> Method{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-method")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-method")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          {{match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => Method::Get,
            1 => Method::Head,
            2 => Method::Post,
            3 => Method::Put,
            4 => Method::Delete,
            5 => Method::Connect,
            6 => Method::Options,
            7 => Method::Trace,
            8 => Method::Patch,
            #[cfg(debug_assertions)]9 => Method::Other({
              let len1 = *((ptr0 + 8) as *const i32) as usize;
              
              {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1)).unwrap()}}
            }),
            #[cfg(not(debug_assertions))]_ => Method::Other({
              let len1 = *((ptr0 + 8) as *const i32) as usize;
              
              {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1)).unwrap()}}
            }),
            #[cfg(debug_assertions)]_ => panic!("invalid enum discriminant"),
          }}}
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_path_with_query(request: IncomingRequest,) -> Option<wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-path-with-query")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-path-with-query")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => None,
            1 => Some({
              let len1 = *((ptr0 + 8) as *const i32) as usize;
              
              {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1)).unwrap()}}
            }),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_scheme(request: IncomingRequest,) -> Option<Scheme>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 16]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-scheme")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-scheme")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => None,
            1 => Some({{match i32::from(*((ptr0 + 4) as *const u8)) {
              0 => Scheme::Http,
              1 => Scheme::Https,
              #[cfg(debug_assertions)]2 => Scheme::Other({
                let len1 = *((ptr0 + 12) as *const i32) as usize;
                
                {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 8) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 8) as *const i32) as *mut _, len1, len1)).unwrap()}}
              }),
              #[cfg(not(debug_assertions))]_ => Scheme::Other({
                let len1 = *((ptr0 + 12) as *const i32) as usize;
                
                {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 8) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 8) as *const i32) as *mut _, len1, len1)).unwrap()}}
              }),
              #[cfg(debug_assertions)]_ => panic!("invalid enum discriminant"),
            }}}),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_authority(request: IncomingRequest,) -> Option<wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-authority")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-authority")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => None,
            1 => Some({
              let len1 = *((ptr0 + 8) as *const i32) as usize;
              
              {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1)).unwrap()}}
            }),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_headers(request: IncomingRequest,) -> Headers{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-headers")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-headers")]
            fn wit_import(
            _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(request));
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_request_consume(request: IncomingRequest,) -> Result<IncomingStream,()>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-request-consume")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-request-consume")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => Ok(*((ptr0 + 4) as *const i32) as u32),
            1 => Err(()),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn new_outgoing_request(method: &Method,path_with_query: Option<&str>,scheme: Option<&Scheme>,authority: Option<&str>,headers: Headers,) -> OutgoingRequest{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (result1_0,result1_1,result1_2,) = match method {
            Method::Get=> {
              (0i32, 0i32, 0i32)
            }
            Method::Head=> {
              (1i32, 0i32, 0i32)
            }
            Method::Post=> {
              (2i32, 0i32, 0i32)
            }
            Method::Put=> {
              (3i32, 0i32, 0i32)
            }
            Method::Delete=> {
              (4i32, 0i32, 0i32)
            }
            Method::Connect=> {
              (5i32, 0i32, 0i32)
            }
            Method::Options=> {
              (6i32, 0i32, 0i32)
            }
            Method::Trace=> {
              (7i32, 0i32, 0i32)
            }
            Method::Patch=> {
              (8i32, 0i32, 0i32)
            }
            Method::Other(e) => {
              let vec0 = e;
              let ptr0 = vec0.as_ptr() as i32;
              let len0 = vec0.len() as i32;
              
              (9i32, ptr0, len0)
            },
          };
          let (result3_0,result3_1,result3_2,) = match path_with_query {
            Some(e) => {
              let vec2 = e;
              let ptr2 = vec2.as_ptr() as i32;
              let len2 = vec2.len() as i32;
              
              (1i32, ptr2, len2)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };let (result6_0,result6_1,result6_2,result6_3,) = match scheme {
            Some(e) => {
              let (result5_0,result5_1,result5_2,) = match e {
                Scheme::Http=> {
                  (0i32, 0i32, 0i32)
                }
                Scheme::Https=> {
                  (1i32, 0i32, 0i32)
                }
                Scheme::Other(e) => {
                  let vec4 = e;
                  let ptr4 = vec4.as_ptr() as i32;
                  let len4 = vec4.len() as i32;
                  
                  (2i32, ptr4, len4)
                },
              };
              
              (1i32, result5_0, result5_1, result5_2)
            },
            None => {
              (0i32, 0i32, 0i32, 0i32)
            },
          };let (result8_0,result8_1,result8_2,) = match authority {
            Some(e) => {
              let vec7 = e;
              let ptr7 = vec7.as_ptr() as i32;
              let len7 = vec7.len() as i32;
              
              (1i32, ptr7, len7)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "new-outgoing-request")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_new-outgoing-request")]
            fn wit_import(
            _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ) -> i32;
          }
          let ret = wit_import(result1_0, result1_1, result1_2, result3_0, result3_1, result3_2, result6_0, result6_1, result6_2, result6_3, result8_0, result8_1, result8_2, wit_bindgen::rt::as_i32(headers));
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn outgoing_request_write(request: OutgoingRequest,) -> Result<OutgoingStream,()>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "outgoing-request-write")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_outgoing-request-write")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(request), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => Ok(*((ptr0 + 4) as *const i32) as u32),
            1 => Err(()),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn drop_response_outparam(response: ResponseOutparam,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-response-outparam")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-response-outparam")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(response));
        }
      }
      #[allow(clippy::all)]
      pub fn set_response_outparam(param: ResponseOutparam,response: Result<OutgoingResponse,&Error>,) -> Result<(),()>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (result5_0,result5_1,result5_2,result5_3,) = match response {
            Ok(e) => { (0i32, wit_bindgen::rt::as_i32(e), 0i32, 0i32) },
            Err(e) => { {
              let (result4_0,result4_1,result4_2,) = match e {
                Error::InvalidUrl(e) => {
                  let vec0 = e;
                  let ptr0 = vec0.as_ptr() as i32;
                  let len0 = vec0.len() as i32;
                  
                  (0i32, ptr0, len0)
                },
                Error::TimeoutError(e) => {
                  let vec1 = e;
                  let ptr1 = vec1.as_ptr() as i32;
                  let len1 = vec1.len() as i32;
                  
                  (1i32, ptr1, len1)
                },
                Error::ProtocolError(e) => {
                  let vec2 = e;
                  let ptr2 = vec2.as_ptr() as i32;
                  let len2 = vec2.len() as i32;
                  
                  (2i32, ptr2, len2)
                },
                Error::UnexpectedError(e) => {
                  let vec3 = e;
                  let ptr3 = vec3.as_ptr() as i32;
                  let len3 = vec3.len() as i32;
                  
                  (3i32, ptr3, len3)
                },
              };
              
              (1i32, result4_0, result4_1, result4_2)
            } },
          };
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "set-response-outparam")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_set-response-outparam")]
            fn wit_import(
            _: i32, _: i32, _: i32, _: i32, _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(param), result5_0, result5_1, result5_2, result5_3);
          match ret {
            0 => Ok(()),
            1 => Err(()),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn drop_incoming_response(response: IncomingResponse,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-incoming-response")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-incoming-response")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(response));
        }
      }
      #[allow(clippy::all)]
      pub fn drop_outgoing_response(response: OutgoingResponse,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-outgoing-response")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-outgoing-response")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(response));
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_response_status(response: IncomingResponse,) -> StatusCode{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-response-status")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-response-status")]
            fn wit_import(
            _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(response));
          ret as u16
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_response_headers(response: IncomingResponse,) -> Headers{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-response-headers")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-response-headers")]
            fn wit_import(
            _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(response));
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn incoming_response_consume(response: IncomingResponse,) -> Result<IncomingStream,()>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "incoming-response-consume")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_incoming-response-consume")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(response), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => Ok(*((ptr0 + 4) as *const i32) as u32),
            1 => Err(()),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn new_outgoing_response(status_code: StatusCode,headers: Headers,) -> OutgoingResponse{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "new-outgoing-response")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_new-outgoing-response")]
            fn wit_import(
            _: i32, _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(status_code), wit_bindgen::rt::as_i32(headers));
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn outgoing_response_write(response: OutgoingResponse,) -> Result<OutgoingStream,()>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "outgoing-response-write")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_outgoing-response-write")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(response), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => Ok(*((ptr0 + 4) as *const i32) as u32),
            1 => Err(()),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn drop_future_incoming_response(f: FutureIncomingResponse,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "drop-future-incoming-response")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_drop-future-incoming-response")]
            fn wit_import(
            _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(f));
        }
      }
      #[allow(clippy::all)]
      pub fn future_incoming_response_get(f: FutureIncomingResponse,) -> Option<Result<IncomingResponse,Error>>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 20]);
          let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "future-incoming-response-get")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_future-incoming-response-get")]
            fn wit_import(
            _: i32, _: i32, );
          }
          wit_import(wit_bindgen::rt::as_i32(f), ptr0);
          match i32::from(*((ptr0 + 0) as *const u8)) {
            0 => None,
            1 => Some(match i32::from(*((ptr0 + 4) as *const u8)) {
              0 => Ok(*((ptr0 + 8) as *const i32) as u32),
              1 => Err({{match i32::from(*((ptr0 + 8) as *const u8)) {
                0 => Error::InvalidUrl({
                  let len1 = *((ptr0 + 16) as *const i32) as usize;
                  
                  {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len1, len1))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len1, len1)).unwrap()}}
                }),
                1 => Error::TimeoutError({
                  let len2 = *((ptr0 + 16) as *const i32) as usize;
                  
                  {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len2, len2))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len2, len2)).unwrap()}}
                }),
                2 => Error::ProtocolError({
                  let len3 = *((ptr0 + 16) as *const i32) as usize;
                  
                  {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len3, len3))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len3, len3)).unwrap()}}
                }),
                #[cfg(debug_assertions)]3 => Error::UnexpectedError({
                  let len4 = *((ptr0 + 16) as *const i32) as usize;
                  
                  {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len4, len4))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len4, len4)).unwrap()}}
                }),
                #[cfg(not(debug_assertions))]_ => Error::UnexpectedError({
                  let len4 = *((ptr0 + 16) as *const i32) as usize;
                  
                  {#[cfg(not(debug_assertions))]{String::from_utf8_unchecked(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len4, len4))}#[cfg(debug_assertions)]{String::from_utf8(Vec::from_raw_parts(*((ptr0 + 12) as *const i32) as *mut _, len4, len4)).unwrap()}}
                }),
                #[cfg(debug_assertions)]_ => panic!("invalid enum discriminant"),
              }}}),
              #[cfg(not(debug_assertions))]
              _ => core::hint::unreachable_unchecked(),
              #[cfg(debug_assertions)]
              _ => panic!("invalid enum discriminant"),
            }),
            #[cfg(not(debug_assertions))]
            _ => core::hint::unreachable_unchecked(),
            #[cfg(debug_assertions)]
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      #[allow(clippy::all)]
      pub fn listen_to_future_incoming_response(f: FutureIncomingResponse,) -> Pollable{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[link(wasm_import_module = "types")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "listen-to-future-incoming-response")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "types_listen-to-future-incoming-response")]
            fn wit_import(
            _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(f));
          ret as u32
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod default_outgoing_http{
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::__link_section;
      
      pub type OutgoingRequest = super::types::OutgoingRequest;
      pub type RequestOptions = super::types::RequestOptions;
      pub type FutureIncomingResponse = super::types::FutureIncomingResponse;
      #[allow(clippy::all)]
      pub fn handle(request: OutgoingRequest,options: Option<RequestOptions>,) -> FutureIncomingResponse{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (result4_0,result4_1,result4_2,result4_3,result4_4,result4_5,result4_6,) = match options {
            Some(e) => {
              let super::types::RequestOptions{ connect_timeout_ms:connect_timeout_ms0, first_byte_timeout_ms:first_byte_timeout_ms0, between_bytes_timeout_ms:between_bytes_timeout_ms0, } = e;
              let (result1_0,result1_1,) = match connect_timeout_ms0 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => {
                  (0i32, 0i32)
                },
              };let (result2_0,result2_1,) = match first_byte_timeout_ms0 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => {
                  (0i32, 0i32)
                },
              };let (result3_0,result3_1,) = match between_bytes_timeout_ms0 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => {
                  (0i32, 0i32)
                },
              };
              (1i32, result1_0, result1_1, result2_0, result2_1, result3_0, result3_1)
            },
            None => {
              (0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
          };
          #[link(wasm_import_module = "default-outgoing-HTTP")]
          extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "handle")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "default-outgoing-HTTP_handle")]
            fn wit_import(
            _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ) -> i32;
          }
          let ret = wit_import(wit_bindgen::rt::as_i32(request), result4_0, result4_1, result4_2, result4_3, result4_4, result4_5, result4_6);
          ret as u32
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod http{
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::__link_section;
      
      pub type IncomingRequest = super::types::IncomingRequest;
      pub type ResponseOutparam = super::types::ResponseOutparam;
      pub trait Http {
        fn handle(request: IncomingRequest,response_out: ResponseOutparam,);
      }
      
      #[doc(hidden)]
      pub unsafe fn call_handle<T: Http>(arg0: i32,arg1: i32,) {
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        // Before executing any other code, use this function to run all static
        // constructors, if they have not yet been run. This is a hack required
        // to work around wasi-libc ctors calling import functions to initialize
        // the environment.
        //
        // This functionality will be removed once rust 1.69.0 is stable, at which
        // point wasi-libc will no longer have this behavior.
        //
        // See
        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
        // for more details.
        #[cfg(target_arch="wasm32")]
        wit_bindgen::rt::run_ctors_once();
        
        T::handle(arg0 as u32, arg1 as u32);
      }
      
    }
    
    
    /// Declares the export of the component's world for the
    /// given type.
    
    macro_rules! export_proxy(($t:ident) => {
      const _: () = {
        
        #[doc(hidden)]
        #[export_name = "HTTP#handle"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn __export_http_handle(arg0: i32,arg1: i32,) {
          http::call_handle::<$t>(arg0,arg1,)
        }
        
      };
      
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = __link_section;
    });
    
    #[cfg(target_arch = "wasm32")]
    #[link_section = "component-type:proxy"]
    #[doc(hidden)]pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 18932] = [2, 0, 8, 112, 114, 101, 118, 105, 101, 119, 50, 5, 112, 114, 111, 120, 121, 5, 112, 114, 111, 120, 121, 0, 97, 115, 109, 12, 0, 1, 0, 7, 239, 17, 1, 65, 9, 1, 66, 2, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 0, 2, 3, 0, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 8, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97, 116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97, 109, 115, 5, 2, 2, 3, 0, 1, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 1, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 111, 2, 3, 2, 1, 3, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 4, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 1, 123, 4, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 6, 1, 113, 3, 4, 72, 84, 84, 80, 0, 0, 5, 72, 84, 84, 80, 83, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 115, 99, 104, 101, 109, 101, 0, 3, 0, 8, 1, 121, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 10, 1, 107, 121, 1, 114, 3, 18, 99, 111, 110, 110, 101, 99, 116, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 21, 102, 105, 114, 115, 116, 45, 98, 121, 116, 101, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 24, 98, 101, 116, 119, 101, 101, 110, 45, 98, 121, 116, 101, 115, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 13, 4, 15, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 3, 1, 121, 4, 17, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 16, 1, 121, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 18, 1, 113, 10, 3, 103, 101, 116, 0, 0, 4, 104, 101, 97, 100, 0, 0, 4, 112, 111, 115, 116, 0, 0, 3, 112, 117, 116, 0, 0, 6, 100, 101, 108, 101, 116, 101, 0, 0, 7, 99, 111, 110, 110, 101, 99, 116, 0, 0, 7, 111, 112, 116, 105, 111, 110, 115, 0, 0, 5, 116, 114, 97, 99, 101, 0, 0, 5, 112, 97, 116, 99, 104, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 20, 4, 15, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 1, 1, 121, 4, 17, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 23, 1, 121, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 25, 1, 121, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 27, 1, 121, 4, 6, 102, 105, 101, 108, 100, 115, 0, 3, 0, 29, 4, 8, 116, 114, 97, 105, 108, 101, 114, 115, 0, 3, 0, 30, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 30, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 33, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 1, 0, 4, 11, 100, 114, 111, 112, 45, 102, 105, 101, 108, 100, 115, 0, 1, 35, 1, 112, 125, 1, 111, 2, 115, 36, 1, 112, 37, 1, 64, 1, 7, 101, 110, 116, 114, 105, 101, 115, 38, 0, 30, 4, 10, 110, 101, 119, 45, 102, 105, 101, 108, 100, 115, 0, 1, 39, 1, 112, 36, 1, 64, 2, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 0, 40, 4, 10, 102, 105, 101, 108, 100, 115, 45, 103, 101, 116, 0, 1, 41, 1, 64, 3, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 40, 1, 0, 4, 10, 102, 105, 101, 108, 100, 115, 45, 115, 101, 116, 0, 1, 42, 1, 64, 2, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45, 100, 101, 108, 101, 116, 101, 0, 1, 43, 1, 64, 3, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 36, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45, 97, 112, 112, 101, 110, 100, 0, 1, 44, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 0, 38, 4, 14, 102, 105, 101, 108, 100, 115, 45, 101, 110, 116, 114, 105, 101, 115, 0, 1, 45, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 0, 30, 4, 12, 102, 105, 101, 108, 100, 115, 45, 99, 108, 111, 110, 101, 0, 1, 46, 1, 107, 31, 1, 64, 1, 1, 115, 22, 0, 47, 4, 22, 102, 105, 110, 105, 115, 104, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 1, 48, 1, 64, 2, 1, 115, 15, 8, 116, 114, 97, 105, 108, 101, 114, 115, 47, 1, 0, 4, 22, 102, 105, 110, 105, 115, 104, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 1, 49, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 1, 0, 4, 21, 100, 114, 111, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 50, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 19, 1, 0, 4, 21, 100, 114, 111, 112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 51, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 21, 4, 23, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 109, 101, 116, 104, 111, 100, 0, 1, 52, 1, 107, 115, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 53, 4, 32, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 112, 97, 116, 104, 45, 119, 105, 116, 104, 45, 113, 117, 101, 114, 121, 0, 1, 54, 1, 107, 9, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 55, 4, 23, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 115, 99, 104, 101, 109, 101, 0, 1, 56, 4, 26, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121, 0, 1, 54, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 32, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 104, 101, 97, 100, 101, 114, 115, 0, 1, 57, 1, 106, 1, 22, 0, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 58, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 99, 111, 110, 115, 117, 109, 101, 0, 1, 59, 1, 64, 5, 6, 109, 101, 116, 104, 111, 100, 21, 15, 112, 97, 116, 104, 45, 119, 105, 116, 104, 45, 113, 117, 101, 114, 121, 53, 6, 115, 99, 104, 101, 109, 101, 55, 9, 97, 117, 116, 104, 111, 114, 105, 116, 121, 53, 7, 104, 101, 97, 100, 101, 114, 115, 32, 0, 19, 4, 20, 110, 101, 119, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 60, 1, 106, 1, 15, 0, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 19, 0, 61, 4, 22, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 119, 114, 105, 116, 101, 0, 1, 62, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 11, 1, 0, 4, 22, 100, 114, 111, 112, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 1, 63, 1, 106, 1, 17, 1, 34, 1, 106, 0, 0, 1, 64, 2, 5, 112, 97, 114, 97, 109, 11, 8, 114, 101, 115, 112, 111, 110, 115, 101, 192, 0, 0, 193, 0, 4, 21, 115, 101, 116, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 1, 66, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 1, 0, 4, 22, 100, 114, 111, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 67, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 1, 0, 4, 22, 100, 114, 111, 112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 68, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 7, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 115, 116, 97, 116, 117, 115, 0, 1, 69, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 32, 4, 25, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 104, 101, 97, 100, 101, 114, 115, 0, 1, 70, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 58, 4, 25, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 99, 111, 110, 115, 117, 109, 101, 0, 1, 71, 1, 64, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 7, 7, 104, 101, 97, 100, 101, 114, 115, 32, 0, 17, 4, 21, 110, 101, 119, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 72, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 0, 61, 4, 23, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 119, 114, 105, 116, 101, 0, 1, 73, 1, 64, 1, 1, 102, 28, 1, 0, 4, 29, 100, 114, 111, 112, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 74, 1, 106, 1, 24, 1, 34, 1, 107, 203, 0, 1, 64, 1, 1, 102, 28, 0, 204, 0, 4, 28, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 103, 101, 116, 0, 1, 77, 1, 64, 1, 1, 102, 28, 0, 5, 4, 34, 108, 105, 115, 116, 101, 110, 45, 116, 111, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 78, 4, 5, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 116, 121, 112, 101, 115, 47, 116, 121, 112, 101, 115, 5, 5, 11, 21, 1, 5, 116, 121, 112, 101, 115, 10, 112, 107, 103, 58, 47, 116, 121, 112, 101, 115, 3, 0, 0, 7, 251, 2, 1, 65, 2, 1, 66, 22, 1, 112, 125, 1, 113, 5, 7, 105, 110, 116, 101, 103, 101, 114, 1, 120, 0, 4, 114, 101, 97, 108, 1, 117, 0, 4, 116, 101, 120, 116, 1, 115, 0, 4, 98, 108, 111, 98, 1, 0, 0, 4, 110, 117, 108, 108, 0, 0, 4, 5, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 112, 2, 1, 114, 1, 6, 118, 97, 108, 117, 101, 115, 3, 4, 10, 114, 111, 119, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 4, 1, 112, 115, 1, 112, 5, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 6, 4, 114, 111, 119, 115, 7, 4, 12, 113, 117, 101, 114, 121, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 8, 1, 113, 5, 16, 110, 111, 45, 115, 117, 99, 104, 45, 100, 97, 116, 97, 98, 97, 115, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 18, 105, 110, 118, 97, 108, 105, 100, 45, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 0, 13, 100, 97, 116, 97, 98, 97, 115, 101, 45, 102, 117, 108, 108, 0, 0, 2, 105, 111, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 10, 1, 121, 4, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 3, 0, 12, 1, 106, 1, 13, 1, 11, 1, 64, 1, 8, 100, 97, 116, 97, 98, 97, 115, 101, 115, 0, 14, 4, 4, 111, 112, 101, 110, 0, 1, 15, 1, 106, 1, 9, 1, 11, 1, 64, 3, 4, 99, 111, 110, 110, 13, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 10, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 3, 0, 16, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 17, 1, 64, 1, 4, 99, 111, 110, 110, 13, 1, 0, 4, 5, 99, 108, 111, 115, 101, 0, 1, 18, 4, 6, 115, 113, 108, 105, 116, 101, 18, 112, 107, 103, 58, 47, 115, 113, 108, 105, 116, 101, 47, 115, 113, 108, 105, 116, 101, 5, 0, 11, 23, 1, 6, 115, 113, 108, 105, 116, 101, 11, 112, 107, 103, 58, 47, 115, 113, 108, 105, 116, 101, 3, 2, 0, 7, 193, 1, 1, 65, 2, 1, 66, 8, 1, 112, 125, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 1, 113, 4, 3, 110, 105, 108, 0, 0, 6, 115, 116, 97, 116, 117, 115, 1, 115, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 2, 1, 113, 2, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 4, 1, 109, 2, 7, 115, 117, 99, 99, 101, 115, 115, 5, 101, 114, 114, 111, 114, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 4, 11, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 5, 0, 11, 33, 1, 11, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 3, 4, 0, 7, 174, 5, 1, 65, 8, 1, 66, 8, 1, 112, 125, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 1, 113, 4, 3, 110, 105, 108, 0, 0, 6, 115, 116, 97, 116, 117, 115, 1, 115, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 2, 1, 113, 2, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 4, 1, 109, 2, 7, 115, 117, 99, 99, 101, 115, 115, 5, 101, 114, 114, 111, 114, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 3, 11, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 112, 97, 121, 108, 111, 97, 100, 2, 3, 0, 0, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 2, 3, 0, 0, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 2, 3, 0, 0, 5, 101, 114, 114, 111, 114, 1, 66, 33, 2, 3, 2, 1, 1, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 2, 2, 3, 2, 1, 3, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 4, 2, 3, 2, 1, 4, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 1, 106, 0, 1, 7, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 7, 99, 104, 97, 110, 110, 101, 108, 115, 7, 112, 97, 121, 108, 111, 97, 100, 1, 0, 8, 4, 7, 112, 117, 98, 108, 105, 115, 104, 0, 1, 9, 1, 106, 1, 1, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 10, 4, 3, 103, 101, 116, 0, 1, 11, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 1, 0, 8, 4, 3, 115, 101, 116, 0, 1, 12, 1, 106, 1, 120, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 13, 4, 4, 105, 110, 99, 114, 0, 1, 14, 1, 112, 115, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 4, 107, 101, 121, 115, 15, 0, 13, 4, 3, 100, 101, 108, 0, 1, 16, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 6, 118, 97, 108, 117, 101, 115, 15, 0, 13, 4, 4, 115, 97, 100, 100, 0, 1, 17, 1, 106, 1, 15, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 18, 4, 8, 115, 109, 101, 109, 98, 101, 114, 115, 0, 1, 19, 4, 4, 115, 114, 101, 109, 0, 1, 17, 1, 112, 3, 1, 112, 5, 1, 106, 1, 21, 1, 7, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 7, 99, 111, 109, 109, 97, 110, 100, 115, 9, 97, 114, 103, 117, 109, 101, 110, 116, 115, 20, 0, 22, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 23, 4, 5, 114, 101, 100, 105, 115, 16, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 47, 114, 101, 100, 105, 115, 5, 5, 11, 21, 1, 5, 114, 101, 100, 105, 115, 10, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 3, 6, 0, 7, 203, 4, 1, 65, 2, 1, 66, 15, 1, 112, 125, 1, 113, 14, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 113, 15, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 11, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 4, 8, 100, 98, 45, 118, 97, 108, 117, 101, 0, 3, 0, 3, 1, 112, 4, 4, 3, 114, 111, 119, 0, 3, 0, 5, 1, 109, 14, 7, 98, 111, 111, 108, 101, 97, 110, 4, 105, 110, 116, 56, 5, 105, 110, 116, 49, 54, 5, 105, 110, 116, 51, 50, 5, 105, 110, 116, 54, 52, 5, 117, 105, 110, 116, 56, 6, 117, 105, 110, 116, 49, 54, 6, 117, 105, 110, 116, 51, 50, 6, 117, 105, 110, 116, 54, 52, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 3, 115, 116, 114, 6, 98, 105, 110, 97, 114, 121, 5, 111, 116, 104, 101, 114, 4, 12, 100, 98, 45, 100, 97, 116, 97, 45, 116, 121, 112, 101, 0, 3, 0, 7, 1, 114, 2, 4, 110, 97, 109, 101, 115, 9, 100, 97, 116, 97, 45, 116, 121, 112, 101, 8, 4, 6, 99, 111, 108, 117, 109, 110, 0, 3, 0, 9, 1, 112, 10, 1, 112, 6, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 11, 4, 114, 111, 119, 115, 12, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 13, 4, 11, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 5, 0, 11, 33, 1, 11, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 3, 8, 0, 7, 159, 7, 1, 65, 6, 1, 66, 15, 1, 112, 125, 1, 113, 14, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 113, 15, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 11, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 4, 8, 100, 98, 45, 118, 97, 108, 117, 101, 0, 3, 0, 3, 1, 112, 4, 4, 3, 114, 111, 119, 0, 3, 0, 5, 1, 109, 14, 7, 98, 111, 111, 108, 101, 97, 110, 4, 105, 110, 116, 56, 5, 105, 110, 116, 49, 54, 5, 105, 110, 116, 51, 50, 5, 105, 110, 116, 54, 52, 5, 117, 105, 110, 116, 56, 6, 117, 105, 110, 116, 49, 54, 6, 117, 105, 110, 116, 51, 50, 6, 117, 105, 110, 116, 54, 52, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 3, 115, 116, 114, 6, 98, 105, 110, 97, 114, 121, 5, 111, 116, 104, 101, 114, 4, 12, 100, 98, 45, 100, 97, 116, 97, 45, 116, 121, 112, 101, 0, 3, 0, 7, 1, 114, 2, 4, 110, 97, 109, 101, 115, 9, 100, 97, 116, 97, 45, 116, 121, 112, 101, 8, 4, 6, 99, 111, 108, 117, 109, 110, 0, 3, 0, 9, 1, 112, 10, 1, 112, 6, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 11, 4, 114, 111, 119, 115, 12, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 13, 3, 11, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 7, 114, 111, 119, 45, 115, 101, 116, 1, 66, 13, 2, 3, 2, 1, 1, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 2, 1, 113, 6, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 17, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 13, 98, 97, 100, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 1, 115, 0, 12, 113, 117, 101, 114, 121, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 23, 118, 97, 108, 117, 101, 45, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 11, 111, 116, 104, 101, 114, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 8, 112, 103, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 112, 1, 1, 106, 1, 3, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 7, 4, 5, 113, 117, 101, 114, 121, 0, 1, 8, 1, 106, 1, 119, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 9, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 10, 4, 8, 112, 111, 115, 116, 103, 114, 101, 115, 22, 112, 107, 103, 58, 47, 112, 111, 115, 116, 103, 114, 101, 115, 47, 112, 111, 115, 116, 103, 114, 101, 115, 5, 3, 11, 27, 1, 8, 112, 111, 115, 116, 103, 114, 101, 115, 13, 112, 107, 103, 58, 47, 112, 111, 115, 116, 103, 114, 101, 115, 3, 10, 0, 7, 246, 8, 1, 65, 14, 1, 66, 2, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 0, 2, 3, 0, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 8, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97, 116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97, 109, 115, 5, 2, 2, 3, 0, 1, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 1, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 35, 2, 3, 2, 1, 3, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 4, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 1, 123, 4, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 6, 1, 113, 3, 4, 72, 84, 84, 80, 0, 0, 5, 72, 84, 84, 80, 83, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 115, 99, 104, 101, 109, 101, 0, 3, 0, 8, 1, 121, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 10, 1, 107, 121, 1, 114, 3, 18, 99, 111, 110, 110, 101, 99, 116, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 21, 102, 105, 114, 115, 116, 45, 98, 121, 116, 101, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 24, 98, 101, 116, 119, 101, 101, 110, 45, 98, 121, 116, 101, 115, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 13, 4, 15, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 3, 1, 121, 4, 17, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 16, 1, 121, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 18, 1, 113, 10, 3, 103, 101, 116, 0, 0, 4, 104, 101, 97, 100, 0, 0, 4, 112, 111, 115, 116, 0, 0, 3, 112, 117, 116, 0, 0, 6, 100, 101, 108, 101, 116, 101, 0, 0, 7, 99, 111, 110, 110, 101, 99, 116, 0, 0, 7, 111, 112, 116, 105, 111, 110, 115, 0, 0, 5, 116, 114, 97, 99, 101, 0, 0, 5, 112, 97, 116, 99, 104, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 20, 4, 15, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 1, 1, 121, 4, 17, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 23, 1, 121, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 25, 1, 121, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 27, 1, 121, 4, 6, 102, 105, 101, 108, 100, 115, 0, 3, 0, 29, 4, 8, 116, 114, 97, 105, 108, 101, 114, 115, 0, 3, 0, 30, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 30, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 33, 3, 5, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 116, 121, 112, 101, 115, 47, 116, 121, 112, 101, 115, 5, 5, 2, 3, 0, 2, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 2, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 2, 3, 0, 2, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 1, 66, 9, 2, 3, 2, 1, 6, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 7, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 2, 2, 3, 2, 1, 8, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 4, 1, 107, 3, 1, 64, 2, 7, 114, 101, 113, 117, 101, 115, 116, 1, 7, 111, 112, 116, 105, 111, 110, 115, 6, 0, 5, 4, 6, 104, 97, 110, 100, 108, 101, 0, 1, 7, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 38, 112, 107, 103, 58, 47, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 5, 9, 11, 43, 1, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 21, 112, 107, 103, 58, 47, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 3, 12, 0, 7, 152, 7, 1, 65, 6, 1, 66, 15, 1, 112, 125, 1, 113, 14, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 113, 15, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 11, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 4, 8, 100, 98, 45, 118, 97, 108, 117, 101, 0, 3, 0, 3, 1, 112, 4, 4, 3, 114, 111, 119, 0, 3, 0, 5, 1, 109, 14, 7, 98, 111, 111, 108, 101, 97, 110, 4, 105, 110, 116, 56, 5, 105, 110, 116, 49, 54, 5, 105, 110, 116, 51, 50, 5, 105, 110, 116, 54, 52, 5, 117, 105, 110, 116, 56, 6, 117, 105, 110, 116, 49, 54, 6, 117, 105, 110, 116, 51, 50, 6, 117, 105, 110, 116, 54, 52, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 3, 115, 116, 114, 6, 98, 105, 110, 97, 114, 121, 5, 111, 116, 104, 101, 114, 4, 12, 100, 98, 45, 100, 97, 116, 97, 45, 116, 121, 112, 101, 0, 3, 0, 7, 1, 114, 2, 4, 110, 97, 109, 101, 115, 9, 100, 97, 116, 97, 45, 116, 121, 112, 101, 8, 4, 6, 99, 111, 108, 117, 109, 110, 0, 3, 0, 9, 1, 112, 10, 1, 112, 6, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 11, 4, 114, 111, 119, 115, 12, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 13, 3, 11, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 7, 114, 111, 119, 45, 115, 101, 116, 1, 66, 13, 2, 3, 2, 1, 1, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 2, 1, 113, 6, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 17, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 13, 98, 97, 100, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 1, 115, 0, 12, 113, 117, 101, 114, 121, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 23, 118, 97, 108, 117, 101, 45, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 11, 111, 116, 104, 101, 114, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 11, 109, 121, 115, 113, 108, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 112, 1, 1, 106, 1, 3, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 7, 4, 5, 113, 117, 101, 114, 121, 0, 1, 8, 1, 106, 0, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 9, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 10, 4, 5, 109, 121, 115, 113, 108, 16, 112, 107, 103, 58, 47, 109, 121, 115, 113, 108, 47, 109, 121, 115, 113, 108, 5, 3, 11, 21, 1, 5, 109, 121, 115, 113, 108, 10, 112, 107, 103, 58, 47, 109, 121, 115, 113, 108, 3, 14, 0, 7, 245, 2, 1, 65, 2, 1, 66, 25, 1, 121, 4, 5, 115, 116, 111, 114, 101, 0, 3, 0, 0, 1, 113, 6, 16, 115, 116, 111, 114, 101, 45, 116, 97, 98, 108, 101, 45, 102, 117, 108, 108, 0, 0, 13, 110, 111, 45, 115, 117, 99, 104, 45, 115, 116, 111, 114, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 13, 105, 110, 118, 97, 108, 105, 100, 45, 115, 116, 111, 114, 101, 0, 0, 11, 110, 111, 45, 115, 117, 99, 104, 45, 107, 101, 121, 0, 0, 2, 105, 111, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 106, 1, 1, 1, 3, 1, 64, 1, 4, 110, 97, 109, 101, 115, 0, 4, 4, 4, 111, 112, 101, 110, 0, 1, 5, 1, 112, 125, 1, 106, 1, 6, 1, 3, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 7, 4, 3, 103, 101, 116, 0, 1, 8, 1, 106, 0, 1, 3, 1, 64, 3, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 6, 0, 9, 4, 3, 115, 101, 116, 0, 1, 10, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 9, 4, 6, 100, 101, 108, 101, 116, 101, 0, 1, 11, 1, 106, 1, 127, 1, 3, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 12, 4, 6, 101, 120, 105, 115, 116, 115, 0, 1, 13, 1, 112, 115, 1, 106, 1, 14, 1, 3, 1, 64, 1, 5, 115, 116, 111, 114, 101, 1, 0, 15, 4, 8, 103, 101, 116, 45, 107, 101, 121, 115, 0, 1, 16, 1, 64, 1, 5, 115, 116, 111, 114, 101, 1, 1, 0, 4, 5, 99, 108, 111, 115, 101, 0, 1, 17, 4, 9, 107, 101, 121, 45, 118, 97, 108, 117, 101, 24, 112, 107, 103, 58, 47, 107, 101, 121, 45, 118, 97, 108, 117, 101, 47, 107, 101, 121, 45, 118, 97, 108, 117, 101, 5, 0, 11, 29, 1, 9, 107, 101, 121, 45, 118, 97, 108, 117, 101, 14, 112, 107, 103, 58, 47, 107, 101, 121, 45, 118, 97, 108, 117, 101, 3, 16, 0, 7, 188, 8, 1, 65, 13, 1, 66, 2, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 0, 2, 3, 0, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 8, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97, 116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97, 109, 115, 5, 2, 2, 3, 0, 1, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 1, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 35, 2, 3, 2, 1, 3, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 4, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 1, 123, 4, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 6, 1, 113, 3, 4, 72, 84, 84, 80, 0, 0, 5, 72, 84, 84, 80, 83, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 115, 99, 104, 101, 109, 101, 0, 3, 0, 8, 1, 121, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 10, 1, 107, 121, 1, 114, 3, 18, 99, 111, 110, 110, 101, 99, 116, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 21, 102, 105, 114, 115, 116, 45, 98, 121, 116, 101, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 24, 98, 101, 116, 119, 101, 101, 110, 45, 98, 121, 116, 101, 115, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 13, 4, 15, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 3, 1, 121, 4, 17, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 16, 1, 121, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 18, 1, 113, 10, 3, 103, 101, 116, 0, 0, 4, 104, 101, 97, 100, 0, 0, 4, 112, 111, 115, 116, 0, 0, 3, 112, 117, 116, 0, 0, 6, 100, 101, 108, 101, 116, 101, 0, 0, 7, 99, 111, 110, 110, 101, 99, 116, 0, 0, 7, 111, 112, 116, 105, 111, 110, 115, 0, 0, 5, 116, 114, 97, 99, 101, 0, 0, 5, 112, 97, 116, 99, 104, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 20, 4, 15, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 1, 1, 121, 4, 17, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 23, 1, 121, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 25, 1, 121, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 27, 1, 121, 4, 6, 102, 105, 101, 108, 100, 115, 0, 3, 0, 29, 4, 8, 116, 114, 97, 105, 108, 101, 114, 115, 0, 3, 0, 30, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 30, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 33, 3, 5, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 116, 121, 112, 101, 115, 47, 116, 121, 112, 101, 115, 5, 5, 2, 3, 0, 2, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 2, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 1, 66, 6, 2, 3, 2, 1, 6, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 7, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 2, 1, 64, 2, 7, 114, 101, 113, 117, 101, 115, 116, 1, 12, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 3, 1, 0, 4, 6, 104, 97, 110, 100, 108, 101, 0, 1, 4, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 38, 112, 107, 103, 58, 47, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 5, 8, 11, 43, 1, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 21, 112, 107, 103, 58, 47, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 3, 18, 0, 7, 177, 32, 1, 65, 2, 1, 65, 33, 1, 66, 5, 1, 114, 2, 7, 115, 101, 99, 111, 110, 100, 115, 119, 11, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 115, 121, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 3, 110, 111, 119, 0, 1, 2, 4, 10, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 0, 1, 2, 3, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 34, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 5, 0, 1, 66, 8, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 13, 100, 114, 111, 112, 45, 112, 111, 108, 108, 97, 98, 108, 101, 0, 1, 2, 1, 112, 1, 1, 112, 125, 1, 64, 1, 2, 105, 110, 3, 0, 4, 4, 11, 112, 111, 108, 108, 45, 111, 110, 101, 111, 102, 102, 0, 1, 5, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 1, 2, 3, 0, 1, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 9, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 119, 4, 7, 105, 110, 115, 116, 97, 110, 116, 0, 3, 0, 2, 1, 64, 0, 0, 3, 4, 3, 110, 111, 119, 0, 1, 4, 4, 10, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 0, 1, 4, 1, 64, 2, 4, 119, 104, 101, 110, 3, 8, 97, 98, 115, 111, 108, 117, 116, 101, 127, 0, 1, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 5, 3, 15, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 44, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 47, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 5, 3, 2, 3, 0, 0, 8, 100, 97, 116, 101, 116, 105, 109, 101, 1, 66, 12, 2, 3, 2, 1, 4, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 0, 1, 114, 3, 10, 117, 116, 99, 45, 111, 102, 102, 115, 101, 116, 122, 4, 110, 97, 109, 101, 115, 23, 105, 110, 45, 100, 97, 121, 108, 105, 103, 104, 116, 45, 115, 97, 118, 105, 110, 103, 45, 116, 105, 109, 101, 127, 4, 16, 116, 105, 109, 101, 122, 111, 110, 101, 45, 100, 105, 115, 112, 108, 97, 121, 0, 3, 0, 2, 1, 121, 4, 8, 116, 105, 109, 101, 122, 111, 110, 101, 0, 3, 0, 4, 1, 64, 2, 4, 116, 104, 105, 115, 5, 4, 119, 104, 101, 110, 1, 0, 3, 4, 7, 100, 105, 115, 112, 108, 97, 121, 0, 1, 6, 1, 64, 2, 4, 116, 104, 105, 115, 5, 4, 119, 104, 101, 110, 1, 0, 122, 4, 10, 117, 116, 99, 45, 111, 102, 102, 115, 101, 116, 0, 1, 7, 1, 64, 1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 13, 100, 114, 111, 112, 45, 116, 105, 109, 101, 122, 111, 110, 101, 0, 1, 8, 3, 8, 116, 105, 109, 101, 122, 111, 110, 101, 30, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 116, 105, 109, 101, 122, 111, 110, 101, 47, 116, 105, 109, 101, 122, 111, 110, 101, 5, 5, 1, 66, 5, 1, 112, 125, 1, 64, 1, 3, 108, 101, 110, 119, 0, 0, 4, 16, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45, 98, 121, 116, 101, 115, 0, 1, 1, 1, 64, 0, 0, 119, 4, 14, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45, 117, 54, 52, 0, 1, 2, 3, 6, 114, 97, 110, 100, 111, 109, 26, 112, 97, 116, 104, 58, 47, 114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111, 109, 5, 6, 1, 66, 39, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 1, 112, 125, 1, 111, 2, 8, 127, 1, 106, 1, 9, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 10, 4, 4, 114, 101, 97, 100, 0, 1, 11, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103, 45, 114, 101, 97, 100, 0, 1, 11, 1, 111, 2, 119, 127, 1, 106, 1, 12, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 13, 4, 4, 115, 107, 105, 112, 0, 1, 14, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 107, 105, 112, 0, 1, 14, 1, 64, 1, 4, 116, 104, 105, 115, 7, 0, 1, 4, 25, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45, 116, 111, 45, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 15, 1, 64, 1, 4, 116, 104, 105, 115, 7, 1, 0, 4, 17, 100, 114, 111, 112, 45, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 16, 1, 106, 1, 119, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 98, 117, 102, 8, 0, 17, 4, 5, 119, 114, 105, 116, 101, 0, 1, 18, 4, 14, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 0, 1, 18, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 108, 101, 110, 119, 0, 17, 4, 12, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115, 0, 1, 19, 4, 21, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115, 0, 1, 19, 1, 64, 3, 4, 116, 104, 105, 115, 5, 3, 115, 114, 99, 7, 3, 108, 101, 110, 119, 0, 13, 4, 6, 115, 112, 108, 105, 99, 101, 0, 1, 20, 4, 15, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 112, 108, 105, 99, 101, 0, 1, 20, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 115, 114, 99, 7, 0, 17, 4, 7, 102, 111, 114, 119, 97, 114, 100, 0, 1, 21, 1, 64, 1, 4, 116, 104, 105, 115, 5, 0, 1, 4, 26, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45, 116, 111, 45, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 22, 1, 64, 1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 18, 100, 114, 111, 112, 45, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 23, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97, 116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97, 109, 115, 5, 7, 2, 3, 0, 5, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 4, 2, 3, 2, 1, 8, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 10, 103, 101, 116, 45, 115, 116, 100, 111, 117, 116, 0, 1, 2, 3, 6, 115, 116, 100, 111, 117, 116, 22, 112, 97, 116, 104, 58, 47, 99, 108, 105, 47, 115, 116, 100, 105, 111, 47, 115, 116, 100, 111, 117, 116, 5, 9, 1, 66, 4, 2, 3, 2, 1, 8, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 10, 103, 101, 116, 45, 115, 116, 100, 101, 114, 114, 0, 1, 2, 3, 6, 115, 116, 100, 101, 114, 114, 22, 112, 97, 116, 104, 58, 47, 99, 108, 105, 47, 115, 116, 100, 105, 111, 47, 115, 116, 100, 101, 114, 114, 5, 10, 2, 3, 0, 5, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 4, 2, 3, 2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 9, 103, 101, 116, 45, 115, 116, 100, 105, 110, 0, 1, 2, 3, 5, 115, 116, 100, 105, 110, 21, 112, 97, 116, 104, 58, 47, 99, 108, 105, 47, 115, 116, 100, 105, 111, 47, 115, 116, 100, 105, 110, 5, 12, 1, 66, 111, 2, 3, 2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 8, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 1, 123, 4, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 6, 1, 113, 3, 4, 72, 84, 84, 80, 0, 0, 5, 72, 84, 84, 80, 83, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 115, 99, 104, 101, 109, 101, 0, 3, 0, 8, 1, 121, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 10, 1, 107, 121, 1, 114, 3, 18, 99, 111, 110, 110, 101, 99, 116, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 21, 102, 105, 114, 115, 116, 45, 98, 121, 116, 101, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 24, 98, 101, 116, 119, 101, 101, 110, 45, 98, 121, 116, 101, 115, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 13, 4, 15, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 3, 1, 121, 4, 17, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 16, 1, 121, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 18, 1, 113, 10, 3, 103, 101, 116, 0, 0, 4, 104, 101, 97, 100, 0, 0, 4, 112, 111, 115, 116, 0, 0, 3, 112, 117, 116, 0, 0, 6, 100, 101, 108, 101, 116, 101, 0, 0, 7, 99, 111, 110, 110, 101, 99, 116, 0, 0, 7, 111, 112, 116, 105, 111, 110, 115, 0, 0, 5, 116, 114, 97, 99, 101, 0, 0, 5, 112, 97, 116, 99, 104, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 20, 4, 15, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 1, 1, 121, 4, 17, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 23, 1, 121, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 25, 1, 121, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 27, 1, 121, 4, 6, 102, 105, 101, 108, 100, 115, 0, 3, 0, 29, 4, 8, 116, 114, 97, 105, 108, 101, 114, 115, 0, 3, 0, 30, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 30, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 33, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 1, 0, 4, 11, 100, 114, 111, 112, 45, 102, 105, 101, 108, 100, 115, 0, 1, 35, 1, 112, 125, 1, 111, 2, 115, 36, 1, 112, 37, 1, 64, 1, 7, 101, 110, 116, 114, 105, 101, 115, 38, 0, 30, 4, 10, 110, 101, 119, 45, 102, 105, 101, 108, 100, 115, 0, 1, 39, 1, 112, 36, 1, 64, 2, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 0, 40, 4, 10, 102, 105, 101, 108, 100, 115, 45, 103, 101, 116, 0, 1, 41, 1, 64, 3, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 40, 1, 0, 4, 10, 102, 105, 101, 108, 100, 115, 45, 115, 101, 116, 0, 1, 42, 1, 64, 2, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45, 100, 101, 108, 101, 116, 101, 0, 1, 43, 1, 64, 3, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 36, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45, 97, 112, 112, 101, 110, 100, 0, 1, 44, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 0, 38, 4, 14, 102, 105, 101, 108, 100, 115, 45, 101, 110, 116, 114, 105, 101, 115, 0, 1, 45, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 0, 30, 4, 12, 102, 105, 101, 108, 100, 115, 45, 99, 108, 111, 110, 101, 0, 1, 46, 1, 107, 31, 1, 64, 1, 1, 115, 22, 0, 47, 4, 22, 102, 105, 110, 105, 115, 104, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 1, 48, 1, 64, 2, 1, 115, 15, 8, 116, 114, 97, 105, 108, 101, 114, 115, 47, 1, 0, 4, 22, 102, 105, 110, 105, 115, 104, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 1, 49, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 1, 0, 4, 21, 100, 114, 111, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 50, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 19, 1, 0, 4, 21, 100, 114, 111, 112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 51, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 21, 4, 23, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 109, 101, 116, 104, 111, 100, 0, 1, 52, 1, 107, 115, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 53, 4, 32, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 112, 97, 116, 104, 45, 119, 105, 116, 104, 45, 113, 117, 101, 114, 121, 0, 1, 54, 1, 107, 9, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 55, 4, 23, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 115, 99, 104, 101, 109, 101, 0, 1, 56, 4, 26, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121, 0, 1, 54, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 32, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 104, 101, 97, 100, 101, 114, 115, 0, 1, 57, 1, 106, 1, 22, 0, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 58, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 99, 111, 110, 115, 117, 109, 101, 0, 1, 59, 1, 64, 5, 6, 109, 101, 116, 104, 111, 100, 21, 15, 112, 97, 116, 104, 45, 119, 105, 116, 104, 45, 113, 117, 101, 114, 121, 53, 6, 115, 99, 104, 101, 109, 101, 55, 9, 97, 117, 116, 104, 111, 114, 105, 116, 121, 53, 7, 104, 101, 97, 100, 101, 114, 115, 32, 0, 19, 4, 20, 110, 101, 119, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 60, 1, 106, 1, 15, 0, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 19, 0, 61, 4, 22, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 119, 114, 105, 116, 101, 0, 1, 62, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 11, 1, 0, 4, 22, 100, 114, 111, 112, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 1, 63, 1, 106, 1, 17, 1, 34, 1, 106, 0, 0, 1, 64, 2, 5, 112, 97, 114, 97, 109, 11, 8, 114, 101, 115, 112, 111, 110, 115, 101, 192, 0, 0, 193, 0, 4, 21, 115, 101, 116, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 1, 66, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 1, 0, 4, 22, 100, 114, 111, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 67, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 1, 0, 4, 22, 100, 114, 111, 112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 68, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 7, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 115, 116, 97, 116, 117, 115, 0, 1, 69, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 32, 4, 25, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 104, 101, 97, 100, 101, 114, 115, 0, 1, 70, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 58, 4, 25, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 99, 111, 110, 115, 117, 109, 101, 0, 1, 71, 1, 64, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 7, 7, 104, 101, 97, 100, 101, 114, 115, 32, 0, 17, 4, 21, 110, 101, 119, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 72, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 0, 61, 4, 23, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 119, 114, 105, 116, 101, 0, 1, 73, 1, 64, 1, 1, 102, 28, 1, 0, 4, 29, 100, 114, 111, 112, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 74, 1, 106, 1, 24, 1, 34, 1, 107, 203, 0, 1, 64, 1, 1, 102, 28, 0, 204, 0, 4, 28, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 103, 101, 116, 0, 1, 77, 1, 64, 1, 1, 102, 28, 0, 5, 4, 34, 108, 105, 115, 116, 101, 110, 45, 116, 111, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 78, 3, 5, 116, 121, 112, 101, 115, 16, 112, 107, 103, 58, 47, 116, 121, 112, 101, 115, 47, 116, 121, 112, 101, 115, 5, 13, 2, 3, 0, 9, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 9, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 2, 3, 0, 9, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 1, 66, 9, 2, 3, 2, 1, 14, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 15, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 2, 2, 3, 2, 1, 16, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 4, 1, 107, 3, 1, 64, 2, 7, 114, 101, 113, 117, 101, 115, 116, 1, 7, 111, 112, 116, 105, 111, 110, 115, 6, 0, 5, 4, 6, 104, 97, 110, 100, 108, 101, 0, 1, 7, 3, 21, 100, 101, 102, 97, 117, 108, 116, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 72, 84, 84, 80, 38, 112, 107, 103, 58, 47, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 111, 117, 116, 103, 111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 5, 17, 2, 3, 0, 9, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 9, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 1, 66, 6, 2, 3, 2, 1, 18, 4, 16, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 19, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 3, 0, 2, 1, 64, 2, 7, 114, 101, 113, 117, 101, 115, 116, 1, 12, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 3, 1, 0, 4, 6, 104, 97, 110, 100, 108, 101, 0, 1, 4, 4, 4, 72, 84, 84, 80, 38, 112, 107, 103, 58, 47, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 105, 110, 99, 111, 109, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 5, 20, 4, 5, 112, 114, 111, 120, 121, 16, 112, 107, 103, 58, 47, 112, 114, 111, 120, 121, 47, 112, 114, 111, 120, 121, 4, 0, 11, 21, 1, 5, 112, 114, 111, 120, 121, 10, 112, 107, 103, 58, 47, 112, 114, 111, 120, 121, 3, 20, 0, 7, 212, 2, 1, 65, 6, 1, 66, 8, 1, 112, 125, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 1, 113, 4, 3, 110, 105, 108, 0, 0, 6, 115, 116, 97, 116, 117, 115, 1, 115, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 2, 1, 113, 2, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 4, 1, 109, 2, 7, 115, 117, 99, 99, 101, 115, 115, 5, 101, 114, 114, 111, 114, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 3, 11, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 112, 97, 121, 108, 111, 97, 100, 2, 3, 0, 0, 5, 101, 114, 114, 111, 114, 1, 66, 7, 2, 3, 2, 1, 1, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 106, 0, 1, 3, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 1, 0, 4, 4, 14, 104, 97, 110, 100, 108, 101, 45, 109, 101, 115, 115, 97, 103, 101, 0, 1, 5, 4, 13, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 32, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 47, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 5, 3, 11, 37, 1, 13, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 18, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 3, 22, 0, 7, 131, 3, 1, 65, 2, 1, 66, 21, 1, 115, 4, 3, 117, 114, 105, 0, 3, 0, 0, 1, 111, 2, 115, 115, 1, 112, 2, 4, 6, 112, 97, 114, 97, 109, 115, 0, 3, 0, 3, 1, 109, 7, 3, 103, 101, 116, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 5, 112, 97, 116, 99, 104, 4, 104, 101, 97, 100, 7, 111, 112, 116, 105, 111, 110, 115, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 5, 1, 123, 4, 11, 104, 116, 116, 112, 45, 115, 116, 97, 116, 117, 115, 0, 3, 0, 7, 1, 109, 6, 7, 115, 117, 99, 99, 101, 115, 115, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45, 97, 108, 108, 111, 119, 101, 100, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 13, 114, 117, 110, 116, 105, 109, 101, 45, 101, 114, 114, 111, 114, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113, 117, 101, 115, 116, 115, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 9, 1, 112, 2, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 11, 1, 112, 125, 4, 4, 98, 111, 100, 121, 0, 3, 0, 13, 1, 107, 12, 1, 107, 14, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 17, 1, 114, 5, 6, 109, 101, 116, 104, 111, 100, 6, 3, 117, 114, 105, 1, 7, 104, 101, 97, 100, 101, 114, 115, 12, 6, 112, 97, 114, 97, 109, 115, 4, 4, 98, 111, 100, 121, 16, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 19, 4, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 0, 11, 31, 1, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 15, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 3, 24, 0, 7, 144, 4, 1, 65, 6, 1, 66, 21, 1, 115, 4, 3, 117, 114, 105, 0, 3, 0, 0, 1, 111, 2, 115, 115, 1, 112, 2, 4, 6, 112, 97, 114, 97, 109, 115, 0, 3, 0, 3, 1, 109, 7, 3, 103, 101, 116, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 5, 112, 97, 116, 99, 104, 4, 104, 101, 97, 100, 7, 111, 112, 116, 105, 111, 110, 115, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 5, 1, 123, 4, 11, 104, 116, 116, 112, 45, 115, 116, 97, 116, 117, 115, 0, 3, 0, 7, 1, 109, 6, 7, 115, 117, 99, 99, 101, 115, 115, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45, 97, 108, 108, 111, 119, 101, 100, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 13, 114, 117, 110, 116, 105, 109, 101, 45, 101, 114, 114, 111, 114, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113, 117, 101, 115, 116, 115, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 9, 1, 112, 2, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 11, 1, 112, 125, 4, 4, 98, 111, 100, 121, 0, 3, 0, 13, 1, 107, 12, 1, 107, 14, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 17, 1, 114, 5, 6, 109, 101, 116, 104, 111, 100, 6, 3, 117, 114, 105, 1, 7, 104, 101, 97, 100, 101, 114, 115, 12, 6, 112, 97, 114, 97, 109, 115, 4, 4, 98, 111, 100, 121, 16, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 19, 3, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 1, 66, 6, 2, 3, 2, 1, 1, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2, 1, 64, 1, 3, 114, 101, 113, 1, 0, 3, 4, 14, 104, 97, 110, 100, 108, 101, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 4, 4, 12, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 30, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 47, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 5, 3, 11, 35, 1, 12, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 17, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 3, 26, 0, 7, 160, 4, 1, 65, 7, 1, 66, 21, 1, 115, 4, 3, 117, 114, 105, 0, 3, 0, 0, 1, 111, 2, 115, 115, 1, 112, 2, 4, 6, 112, 97, 114, 97, 109, 115, 0, 3, 0, 3, 1, 109, 7, 3, 103, 101, 116, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 5, 112, 97, 116, 99, 104, 4, 104, 101, 97, 100, 7, 111, 112, 116, 105, 111, 110, 115, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 5, 1, 123, 4, 11, 104, 116, 116, 112, 45, 115, 116, 97, 116, 117, 115, 0, 3, 0, 7, 1, 109, 6, 7, 115, 117, 99, 99, 101, 115, 115, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45, 97, 108, 108, 111, 119, 101, 100, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 13, 114, 117, 110, 116, 105, 109, 101, 45, 101, 114, 114, 111, 114, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113, 117, 101, 115, 116, 115, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 9, 1, 112, 2, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 11, 1, 112, 125, 4, 4, 98, 111, 100, 121, 0, 3, 0, 13, 1, 107, 12, 1, 107, 14, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 17, 1, 114, 5, 6, 109, 101, 116, 104, 111, 100, 6, 3, 117, 114, 105, 1, 7, 104, 101, 97, 100, 101, 114, 115, 12, 6, 112, 97, 114, 97, 109, 115, 4, 4, 98, 111, 100, 121, 16, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 19, 3, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 2, 3, 0, 0, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 1, 66, 9, 2, 3, 2, 1, 1, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2, 2, 3, 2, 1, 3, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 106, 1, 3, 1, 5, 1, 64, 1, 3, 114, 101, 113, 1, 0, 6, 4, 12, 115, 101, 110, 100, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 7, 4, 4, 104, 116, 116, 112, 14, 112, 107, 103, 58, 47, 104, 116, 116, 112, 47, 104, 116, 116, 112, 5, 4, 11, 19, 1, 4, 104, 116, 116, 112, 9, 112, 107, 103, 58, 47, 104, 116, 116, 112, 3, 28, 0, 7, 134, 1, 1, 65, 2, 1, 66, 5, 1, 113, 4, 8, 112, 114, 111, 118, 105, 100, 101, 114, 1, 115, 0, 11, 105, 110, 118, 97, 108, 105, 100, 45, 107, 101, 121, 1, 115, 0, 14, 105, 110, 118, 97, 108, 105, 100, 45, 115, 99, 104, 101, 109, 97, 1, 115, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 0, 1, 106, 1, 115, 1, 1, 1, 64, 1, 3, 107, 101, 121, 115, 0, 2, 4, 10, 103, 101, 116, 45, 99, 111, 110, 102, 105, 103, 0, 1, 3, 4, 6, 99, 111, 110, 102, 105, 103, 18, 112, 107, 103, 58, 47, 99, 111, 110, 102, 105, 103, 47, 99, 111, 110, 102, 105, 103, 5, 0, 11, 23, 1, 6, 99, 111, 110, 102, 105, 103, 11, 112, 107, 103, 58, 47, 99, 111, 110, 102, 105, 103, 3, 30, 0, 7, 149, 28, 1, 65, 2, 1, 65, 33, 1, 66, 5, 1, 113, 4, 8, 112, 114, 111, 118, 105, 100, 101, 114, 1, 115, 0, 11, 105, 110, 118, 97, 108, 105, 100, 45, 107, 101, 121, 1, 115, 0, 14, 105, 110, 118, 97, 108, 105, 100, 45, 115, 99, 104, 101, 109, 97, 1, 115, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 0, 1, 106, 1, 115, 1, 1, 1, 64, 1, 3, 107, 101, 121, 115, 0, 2, 4, 10, 103, 101, 116, 45, 99, 111, 110, 102, 105, 103, 0, 1, 3, 3, 6, 99, 111, 110, 102, 105, 103, 18, 112, 107, 103, 58, 47, 99, 111, 110, 102, 105, 103, 47, 99, 111, 110, 102, 105, 103, 5, 0, 1, 66, 15, 1, 112, 125, 1, 113, 14, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 113, 15, 7, 98, 111, 111, 108, 101, 97, 110, 1, 127, 0, 4, 105, 110, 116, 56, 1, 126, 0, 5, 105, 110, 116, 49, 54, 1, 124, 0, 5, 105, 110, 116, 51, 50, 1, 122, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 5, 117, 105, 110, 116, 56, 1, 125, 0, 6, 117, 105, 110, 116, 49, 54, 1, 123, 0, 6, 117, 105, 110, 116, 51, 50, 1, 121, 0, 6, 117, 105, 110, 116, 54, 52, 1, 119, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 1, 118, 0, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 1, 117, 0, 3, 115, 116, 114, 1, 115, 0, 6, 98, 105, 110, 97, 114, 121, 1, 0, 0, 7, 100, 98, 45, 110, 117, 108, 108, 0, 0, 11, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 0, 4, 8, 100, 98, 45, 118, 97, 108, 117, 101, 0, 3, 0, 3, 1, 112, 4, 4, 3, 114, 111, 119, 0, 3, 0, 5, 1, 109, 14, 7, 98, 111, 111, 108, 101, 97, 110, 4, 105, 110, 116, 56, 5, 105, 110, 116, 49, 54, 5, 105, 110, 116, 51, 50, 5, 105, 110, 116, 54, 52, 5, 117, 105, 110, 116, 56, 6, 117, 105, 110, 116, 49, 54, 6, 117, 105, 110, 116, 51, 50, 6, 117, 105, 110, 116, 54, 52, 10, 102, 108, 111, 97, 116, 105, 110, 103, 51, 50, 10, 102, 108, 111, 97, 116, 105, 110, 103, 54, 52, 3, 115, 116, 114, 6, 98, 105, 110, 97, 114, 121, 5, 111, 116, 104, 101, 114, 4, 12, 100, 98, 45, 100, 97, 116, 97, 45, 116, 121, 112, 101, 0, 3, 0, 7, 1, 114, 2, 4, 110, 97, 109, 101, 115, 9, 100, 97, 116, 97, 45, 116, 121, 112, 101, 8, 4, 6, 99, 111, 108, 117, 109, 110, 0, 3, 0, 9, 1, 112, 10, 1, 112, 6, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 11, 4, 114, 111, 119, 115, 12, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 13, 3, 11, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 47, 114, 100, 98, 109, 115, 45, 116, 121, 112, 101, 115, 5, 1, 2, 3, 0, 1, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 2, 3, 0, 1, 7, 114, 111, 119, 45, 115, 101, 116, 1, 66, 13, 2, 3, 2, 1, 2, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 0, 2, 3, 2, 1, 3, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 2, 1, 113, 6, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 17, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 13, 98, 97, 100, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 1, 115, 0, 12, 113, 117, 101, 114, 121, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 23, 118, 97, 108, 117, 101, 45, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 11, 111, 116, 104, 101, 114, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 8, 112, 103, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 112, 1, 1, 106, 1, 3, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 7, 4, 5, 113, 117, 101, 114, 121, 0, 1, 8, 1, 106, 1, 119, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 9, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 10, 3, 8, 112, 111, 115, 116, 103, 114, 101, 115, 22, 112, 107, 103, 58, 47, 112, 111, 115, 116, 103, 114, 101, 115, 47, 112, 111, 115, 116, 103, 114, 101, 115, 5, 4, 1, 66, 13, 2, 3, 2, 1, 2, 4, 15, 112, 97, 114, 97, 109, 101, 116, 101, 114, 45, 118, 97, 108, 117, 101, 0, 3, 0, 0, 2, 3, 2, 1, 3, 4, 7, 114, 111, 119, 45, 115, 101, 116, 0, 3, 0, 2, 1, 113, 6, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 17, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 13, 98, 97, 100, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 1, 115, 0, 12, 113, 117, 101, 114, 121, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 23, 118, 97, 108, 117, 101, 45, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 11, 111, 116, 104, 101, 114, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 11, 109, 121, 115, 113, 108, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 112, 1, 1, 106, 1, 3, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 7, 4, 5, 113, 117, 101, 114, 121, 0, 1, 8, 1, 106, 0, 1, 5, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 6, 112, 97, 114, 97, 109, 115, 6, 0, 9, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 10, 3, 5, 109, 121, 115, 113, 108, 16, 112, 107, 103, 58, 47, 109, 121, 115, 113, 108, 47, 109, 121, 115, 113, 108, 5, 5, 1, 66, 22, 1, 112, 125, 1, 113, 5, 7, 105, 110, 116, 101, 103, 101, 114, 1, 120, 0, 4, 114, 101, 97, 108, 1, 117, 0, 4, 116, 101, 120, 116, 1, 115, 0, 4, 98, 108, 111, 98, 1, 0, 0, 4, 110, 117, 108, 108, 0, 0, 4, 5, 118, 97, 108, 117, 101, 0, 3, 0, 1, 1, 112, 2, 1, 114, 1, 6, 118, 97, 108, 117, 101, 115, 3, 4, 10, 114, 111, 119, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 4, 1, 112, 115, 1, 112, 5, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 6, 4, 114, 111, 119, 115, 7, 4, 12, 113, 117, 101, 114, 121, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 8, 1, 113, 5, 16, 110, 111, 45, 115, 117, 99, 104, 45, 100, 97, 116, 97, 98, 97, 115, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 18, 105, 110, 118, 97, 108, 105, 100, 45, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 0, 13, 100, 97, 116, 97, 98, 97, 115, 101, 45, 102, 117, 108, 108, 0, 0, 2, 105, 111, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 10, 1, 121, 4, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 3, 0, 12, 1, 106, 1, 13, 1, 11, 1, 64, 1, 8, 100, 97, 116, 97, 98, 97, 115, 101, 115, 0, 14, 4, 4, 111, 112, 101, 110, 0, 1, 15, 1, 106, 1, 9, 1, 11, 1, 64, 3, 4, 99, 111, 110, 110, 13, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 10, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 3, 0, 16, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 17, 1, 64, 1, 4, 99, 111, 110, 110, 13, 1, 0, 4, 5, 99, 108, 111, 115, 101, 0, 1, 18, 3, 6, 115, 113, 108, 105, 116, 101, 18, 112, 107, 103, 58, 47, 115, 113, 108, 105, 116, 101, 47, 115, 113, 108, 105, 116, 101, 5, 6, 1, 66, 8, 1, 112, 125, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 1, 113, 4, 3, 110, 105, 108, 0, 0, 6, 115, 116, 97, 116, 117, 115, 1, 115, 0, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 2, 1, 113, 2, 5, 105, 110, 116, 54, 52, 1, 120, 0, 6, 98, 105, 110, 97, 114, 121, 1, 1, 0, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 4, 1, 109, 2, 7, 115, 117, 99, 99, 101, 115, 115, 5, 101, 114, 114, 111, 114, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 3, 11, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 28, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 47, 114, 101, 100, 105, 115, 45, 116, 121, 112, 101, 115, 5, 7, 2, 3, 0, 5, 7, 112, 97, 121, 108, 111, 97, 100, 2, 3, 0, 5, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 2, 3, 0, 5, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 2, 3, 0, 5, 5, 101, 114, 114, 111, 114, 1, 66, 33, 2, 3, 2, 1, 8, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 2, 3, 2, 1, 9, 4, 15, 114, 101, 100, 105, 115, 45, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0, 3, 0, 2, 2, 3, 2, 1, 10, 4, 12, 114, 101, 100, 105, 115, 45, 114, 101, 115, 117, 108, 116, 0, 3, 0, 4, 2, 3, 2, 1, 11, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 6, 1, 106, 0, 1, 7, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 7, 99, 104, 97, 110, 110, 101, 108, 115, 7, 112, 97, 121, 108, 111, 97, 100, 1, 0, 8, 4, 7, 112, 117, 98, 108, 105, 115, 104, 0, 1, 9, 1, 106, 1, 1, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 10, 4, 3, 103, 101, 116, 0, 1, 11, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 1, 0, 8, 4, 3, 115, 101, 116, 0, 1, 12, 1, 106, 1, 120, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 13, 4, 4, 105, 110, 99, 114, 0, 1, 14, 1, 112, 115, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 4, 107, 101, 121, 115, 15, 0, 13, 4, 3, 100, 101, 108, 0, 1, 16, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 6, 118, 97, 108, 117, 101, 115, 15, 0, 13, 4, 4, 115, 97, 100, 100, 0, 1, 17, 1, 106, 1, 15, 1, 7, 1, 64, 2, 7, 97, 100, 100, 114, 101, 115, 115, 115, 3, 107, 101, 121, 115, 0, 18, 4, 8, 115, 109, 101, 109, 98, 101, 114, 115, 0, 1, 19, 4, 4, 115, 114, 101, 109, 0, 1, 17, 1, 112, 3, 1, 112, 5, 1, 106, 1, 21, 1, 7, 1, 64, 3, 7, 97, 100, 100, 114, 101, 115, 115, 115, 7, 99, 111, 109, 109, 97, 110, 100, 115, 9, 97, 114, 103, 117, 109, 101, 110, 116, 115, 20, 0, 22, 4, 7, 101, 120, 101, 99, 117, 116, 101, 0, 1, 23, 3, 5, 114, 101, 100, 105, 115, 16, 112, 107, 103, 58, 47, 114, 101, 100, 105, 115, 47, 114, 101, 100, 105, 115, 5, 12, 1, 66, 25, 1, 121, 4, 5, 115, 116, 111, 114, 101, 0, 3, 0, 0, 1, 113, 6, 16, 115, 116, 111, 114, 101, 45, 116, 97, 98, 108, 101, 45, 102, 117, 108, 108, 0, 0, 13, 110, 111, 45, 115, 117, 99, 104, 45, 115, 116, 111, 114, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 13, 105, 110, 118, 97, 108, 105, 100, 45, 115, 116, 111, 114, 101, 0, 0, 11, 110, 111, 45, 115, 117, 99, 104, 45, 107, 101, 121, 0, 0, 2, 105, 111, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 106, 1, 1, 1, 3, 1, 64, 1, 4, 110, 97, 109, 101, 115, 0, 4, 4, 4, 111, 112, 101, 110, 0, 1, 5, 1, 112, 125, 1, 106, 1, 6, 1, 3, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 7, 4, 3, 103, 101, 116, 0, 1, 8, 1, 106, 0, 1, 3, 1, 64, 3, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 6, 0, 9, 4, 3, 115, 101, 116, 0, 1, 10, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 9, 4, 6, 100, 101, 108, 101, 116, 101, 0, 1, 11, 1, 106, 1, 127, 1, 3, 1, 64, 2, 5, 115, 116, 111, 114, 101, 1, 3, 107, 101, 121, 115, 0, 12, 4, 6, 101, 120, 105, 115, 116, 115, 0, 1, 13, 1, 112, 115, 1, 106, 1, 14, 1, 3, 1, 64, 1, 5, 115, 116, 111, 114, 101, 1, 0, 15, 4, 8, 103, 101, 116, 45, 107, 101, 121, 115, 0, 1, 16, 1, 64, 1, 5, 115, 116, 111, 114, 101, 1, 1, 0, 4, 5, 99, 108, 111, 115, 101, 0, 1, 17, 3, 9, 107, 101, 121, 45, 118, 97, 108, 117, 101, 24, 112, 107, 103, 58, 47, 107, 101, 121, 45, 118, 97, 108, 117, 101, 47, 107, 101, 121, 45, 118, 97, 108, 117, 101, 5, 13, 1, 66, 21, 1, 115, 4, 3, 117, 114, 105, 0, 3, 0, 0, 1, 111, 2, 115, 115, 1, 112, 2, 4, 6, 112, 97, 114, 97, 109, 115, 0, 3, 0, 3, 1, 109, 7, 3, 103, 101, 116, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 5, 112, 97, 116, 99, 104, 4, 104, 101, 97, 100, 7, 111, 112, 116, 105, 111, 110, 115, 4, 6, 109, 101, 116, 104, 111, 100, 0, 3, 0, 5, 1, 123, 4, 11, 104, 116, 116, 112, 45, 115, 116, 97, 116, 117, 115, 0, 3, 0, 7, 1, 109, 6, 7, 115, 117, 99, 99, 101, 115, 115, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45, 97, 108, 108, 111, 119, 101, 100, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 13, 114, 117, 110, 116, 105, 109, 101, 45, 101, 114, 114, 111, 114, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113, 117, 101, 115, 116, 115, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 9, 1, 112, 2, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 11, 1, 112, 125, 4, 4, 98, 111, 100, 121, 0, 3, 0, 13, 1, 107, 12, 1, 107, 14, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 17, 1, 114, 5, 6, 109, 101, 116, 104, 111, 100, 6, 3, 117, 114, 105, 1, 7, 104, 101, 97, 100, 101, 114, 115, 12, 6, 112, 97, 114, 97, 109, 115, 4, 4, 98, 111, 100, 121, 16, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 19, 3, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 14, 2, 3, 0, 8, 7, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 8, 8, 114, 101, 115, 112, 111, 110, 115, 101, 2, 3, 0, 8, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 1, 66, 9, 2, 3, 2, 1, 15, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2, 2, 3, 2, 1, 17, 4, 10, 104, 116, 116, 112, 45, 101, 114, 114, 111, 114, 0, 3, 0, 4, 1, 106, 1, 3, 1, 5, 1, 64, 1, 3, 114, 101, 113, 1, 0, 6, 4, 12, 115, 101, 110, 100, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 7, 3, 4, 104, 116, 116, 112, 14, 112, 107, 103, 58, 47, 104, 116, 116, 112, 47, 104, 116, 116, 112, 5, 18, 1, 66, 6, 2, 3, 2, 1, 15, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 16, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2, 1, 64, 1, 3, 114, 101, 113, 1, 0, 3, 4, 14, 104, 97, 110, 100, 108, 101, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 4, 4, 12, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 30, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 47, 105, 110, 98, 111, 117, 110, 100, 45, 104, 116, 116, 112, 5, 19, 1, 66, 7, 2, 3, 2, 1, 8, 4, 7, 112, 97, 121, 108, 111, 97, 100, 0, 3, 0, 0, 2, 3, 2, 1, 11, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 106, 0, 1, 3, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 1, 0, 4, 4, 14, 104, 97, 110, 100, 108, 101, 45, 109, 101, 115, 115, 97, 103, 101, 0, 1, 5, 4, 13, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 32, 112, 107, 103, 58, 47, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 47, 105, 110, 98, 111, 117, 110, 100, 45, 114, 101, 100, 105, 115, 5, 20, 4, 7, 114, 101, 97, 99, 116, 111, 114, 20, 112, 107, 103, 58, 47, 114, 101, 97, 99, 116, 111, 114, 47, 114, 101, 97, 99, 116, 111, 114, 4, 0, 0, 68, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5, 48, 46, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48, 46, 54, 46, 48, 11, 25, 1, 7, 114, 101, 97, 99, 116, 111, 114, 12, 112, 107, 103, 58, 47, 114, 101, 97, 99, 116, 111, 114, 3, 32, 0];
    
    #[inline(never)]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    pub fn __link_section() {}
    